<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JQuery系列(一)</title>
      <link href="/2020/12/07/JQuery%E7%B3%BB%E5%88%97-%E4%B8%80/"/>
      <url>/2020/12/07/JQuery%E7%B3%BB%E5%88%97-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<blockquote><h5 id="hello，大家好，我是泰戈尔，这次文章分享的是关于JQuery系列的文章，下面一起来深入了解下吧。"><a href="#hello，大家好，我是泰戈尔，这次文章分享的是关于JQuery系列的文章，下面一起来深入了解下吧。" class="headerlink" title="hello，大家好，我是泰戈尔，这次文章分享的是关于JQuery系列的文章，下面一起来深入了解下吧。"></a>hello，大家好，我是泰戈尔，这次文章分享的是关于JQuery系列的文章，下面一起来深入了解下吧。</h5></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png"></p><h2 id="首先我们要知道为什么要学jQuery，"><a href="#首先我们要知道为什么要学jQuery，" class="headerlink" title="首先我们要知道为什么要学jQuery，"></a>首先我们要知道为什么要学jQuery，</h2><p>使用JS操作DOM的时候，会遇到以下的一些缺点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取元素的方法太少且长，麻烦。</span></span><br><span class="line"><span class="comment">//2. 遍历伪数组很麻烦，通常要嵌套一大堆的for循环。</span></span><br><span class="line"><span class="comment">//3. 注册的事件会覆盖。</span></span><br><span class="line"><span class="comment">//4. 有兼容性问题。</span></span><br><span class="line"><span class="comment">//5. 实现动画很麻烦</span></span><br></pre></td></tr></table></figure><h2 id="初次体验下jQuery"><a href="#初次体验下jQuery" class="headerlink" title="初次体验下jQuery"></a>初次体验下jQuery</h2><p>【让div显示与设置内容.html】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 隐式迭代：偷偷的遍历，在jQuery中，不需要手动写for循环了，会自动进行遍历。</span></span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).show(<span class="number">200</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">&quot;#btn2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).text(<span class="string">&quot;我是内容&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>使用jQuery的优点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 获取元素的方式非常的简单，而且非常的丰富</span></span><br><span class="line"><span class="comment">//2. jQuery的隐式迭代特性，不再需要书写for循环语句。</span></span><br><span class="line"><span class="comment">//3. 使用jQuery完全不用考虑兼容性问题。</span></span><br><span class="line"><span class="comment">//4. jQuery提供了一系列动画相关的函数，使用非常方便。</span></span><br><span class="line"><span class="comment">//5. 代码简单、粗暴。</span></span><br></pre></td></tr></table></figure><p><strong>没有对比，就没有伤害，有了对比，处处戳中要害。</strong></p><h2 id="我们一起来了解下什么是jQuery呢"><a href="#我们一起来了解下什么是jQuery呢" class="headerlink" title="我们一起来了解下什么是jQuery呢?"></a>我们一起来了解下什么是jQuery呢?</h2><blockquote><p>jQuery是一个快速的、轻量的、功能丰富的js库。</p></blockquote><p>jQuery的官网 <a href="http://jquery.com/">http://jquery.com/</a> </p><p>jQuery就是一个js库，使用jQuery的话，会比使用JavaScript更简单。</p><p>js库：把一些常用到的方法写到一个单独的js文件，使用的时候直接去引用这js文件就可以了。（animate.js、common.js）</p><h2 id="首先了解下什么是入口函数"><a href="#首先了解下什么是入口函数" class="headerlink" title="首先了解下什么是入口函数"></a>首先了解下什么是入口函数</h2><p>入口函数的好处：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 等待文档加载完成，保证能够获取到元素</span><br><span class="line"><span class="number">2.</span> 形成了一个沙箱，防止全局变量污染。</span><br></pre></td></tr></table></figure><p>两种写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种写法</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们来比较下jQuery入口函数与js入口函数的区别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>JavaScript的入口函数要等到页面中所有资源（包括图片、文件）加载完成才开始执行。</span><br><span class="line"><span class="number">2.</span>jQuery的入口函数只会等待文档树加载完成就开始执行，并不会等待图片、文件的加载。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片资源加载对比</span></span><br><span class="line">&lt;img src=<span class="string">&quot;http://img.daimg.com/uploads/allimg/160324/1-160324232117.jpg&quot;</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;http://img.daimg.com/uploads/allimg/160318/1-16031P01P0.jpg&quot;</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;http://img.daimg.com/uploads/allimg/160318/1-16031P01332.jpg&quot;</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;http://img.daimg.com/uploads/allimg/160608/1-16060R35630.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line">&lt;img src=<span class="string">&quot;http://img.daimg.com/uploads/allimg/160531/1-160531224303.jpg&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="接下来我们来学习下jQuery使用步骤"><a href="#接下来我们来学习下jQuery使用步骤" class="headerlink" title="接下来我们来学习下jQuery使用步骤"></a>接下来我们来学习下jQuery使用步骤</h2><ol><li>引包（引入js文件）</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;jquery-1.11.1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>写上入口函数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>在入口函数内部实现功能</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#btnShowDiv&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">$(<span class="string">&quot;div&quot;</span>).show(<span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="jQuery对象与DOM对象的区别以及两者的相互转换"><a href="#jQuery对象与DOM对象的区别以及两者的相互转换" class="headerlink" title="jQuery对象与DOM对象的区别以及两者的相互转换"></a>jQuery对象与DOM对象的区别以及两者的相互转换</h2><p>基本概念：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> DOM对象：使用JavaScript中的方法获取页面中的元素返回的对象就是dom对象。</span><br><span class="line"><span class="number">2.</span> jQuery对象：jquery对象就是使用jquery的方法获取页面中的元素返回的对象就是jQuery对象。</span><br><span class="line"><span class="number">3.</span> jQuery对象其实就是DOM对象的包装集（包装了DOM对象的集合（伪数组））</span><br></pre></td></tr></table></figure><p>jQuery对象与DOM对象的区别：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> DOM对象与jQuery对象的方法不能混用。</span><br><span class="line"><span class="number">2.</span> DOM对象可以和jQuery对象相互转化</span><br></pre></td></tr></table></figure><p>DOM对象转换成jQuery对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $obj = $(domObj);</span><br><span class="line"><span class="comment">// $(document).ready(function()&#123;&#125;); 就是典型的DOM对象转jQuery对象</span></span><br></pre></td></tr></table></figure><p>jQuery对象转换成DOM对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $li = $(“li”);</span><br><span class="line"><span class="comment">//第一种方法（推荐使用）</span></span><br><span class="line">$li[<span class="number">0</span>]</span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line">$li.get(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="我们再来学习下jQuery中的过滤选择器"><a href="#我们再来学习下jQuery中的过滤选择器" class="headerlink" title="我们再来学习下jQuery中的过滤选择器"></a>我们再来学习下jQuery中的过滤选择器</h1><h2 id="什么是jQuery选择器"><a href="#什么是jQuery选择器" class="headerlink" title="什么是jQuery选择器"></a>什么是jQuery选择器</h2><p>jQuery选择器是jQuery为我们提供的一组方法，让我们更加方便的获取到页面中的元素。注意：jQuery选择器返回的是jQuery对象。</p><p>jQuery选择器有很多，基本兼容了CSS1到CSS3所有的选择器，并且jQuery还添加了很多更加复杂的选择器。【查看jQuery文档】</p><p>jQuery选择器虽然很多，但是选择器之间可以相互替代，就是说获取一个元素，你会有很多种方法获取到。所以我们平时真正能用到的只是少数的最常用的选择器。</p><h2 id="1-css选择器"><a href="#1-css选择器" class="headerlink" title="1.css选择器"></a>1.css选择器</h2><blockquote><p>jQuery完全兼容css选择器</p></blockquote><table><thead><tr><th>名称</th><th>用法</th><th align="left">描述</th></tr></thead><tbody><tr><td>ID选择器</td><td>$(“#id”);</td><td align="left">获取指定ID的元素</td></tr><tr><td>类选择器</td><td>$(“.class”);</td><td align="left">获取同一类class的元素</td></tr><tr><td>标签选择器</td><td>$(“div”);</td><td align="left">获取同一类标签的所有元素</td></tr><tr><td>并集选择器</td><td>$(“div,p,li”);</td><td align="left">使用逗号分隔，只要符合条件之一就可。</td></tr><tr><td>交集选择器</td><td>$(“div.redClass”);</td><td align="left">获取class为redClass的div元素</td></tr><tr><td>子代选择器</td><td>$(“ul&gt;li”);</td><td align="left">使用&gt;号，获取儿子层级的元素，注意，并不会获取孙子层级的元素</td></tr><tr><td>后代选择器</td><td>$(“ul li”);</td><td align="left">使用空格，代表后代选择器，获取ul下的所有li元素，包括孙子等</td></tr></tbody></table><blockquote><p>跟CSS的选择器一模一样。</p></blockquote><h2 id="2-过滤选择器"><a href="#2-过滤选择器" class="headerlink" title="2.过滤选择器"></a>2.过滤选择器</h2><blockquote><p>这类选择器都带冒号:</p></blockquote><table><thead><tr><th>名称</th><th>用法</th><th align="left">描述</th></tr></thead><tbody><tr><td>:eq（index）</td><td>$(“li:eq(2)”).css(“color”, ”red”);</td><td align="left">获取到的li元素中，选择索引号为2的元素，索引号index从0开始。</td></tr><tr><td>:odd</td><td>$(“li:odd”).css(“color”, ”red”);</td><td align="left">获取到的li元素中，选择索引号为奇数的元素</td></tr><tr><td>:even</td><td>$(“li:even”).css(“color”, ”red”);</td><td align="left">获取到的li元素中，选择索引号为偶数的元素</td></tr><tr><td>:first</td><td>$(“li:first”).css(“color”, ”red”);</td><td align="left">获取到的li元素中的第一个</td></tr><tr><td>:last</td><td>$(“li:last”).css(“color”, ”red”);</td><td align="left">获取到的li元素中的最后一个</td></tr></tbody></table><h2 id="3-筛选选择器"><a href="#3-筛选选择器" class="headerlink" title="3.筛选选择器"></a>3.筛选选择器</h2><blockquote><p>筛选选择器的功能与过滤选择器有点类似，但是用法不一样，<code>筛选选择器</code>主要是方法。</p></blockquote><table><thead><tr><th>名称</th><th align="left">用法</th><th align="left">描述</th></tr></thead><tbody><tr><td>children(selector)</td><td align="left">$(“ul”).children(“li”)</td><td align="left">获取当前元素的所有子元素中的li元素</td></tr><tr><td>find(selector)</td><td align="left">$(“ul”).find(“li”);</td><td align="left">获取当前元素中的后代元素中的li元素</td></tr><tr><td>siblings(selector)</td><td align="left">$(“#first”).siblings(“li”);</td><td align="left">查找兄弟节点，不包括自己本身。</td></tr><tr><td>parent()</td><td align="left">$(“#first”).parent();</td><td align="left">查找父亲</td></tr><tr><td>eq(index)</td><td align="left">$(“li”).eq(2);</td><td align="left">相当于<code>$(“li:eq(2)”)</code>,index从0开始</td></tr><tr><td>next()</td><td align="left">$(“li”).next()</td><td align="left">找下一个兄弟</td></tr><tr><td>prev()</td><td align="left">$(“li”).prev()</td><td align="left">找上一次兄弟</td></tr></tbody></table><hr><h2 id="JQuery中经典的鼠标事件"><a href="#JQuery中经典的鼠标事件" class="headerlink" title="JQuery中经典的鼠标事件"></a>JQuery中经典的鼠标事件</h2><h2 id="mouseover-与-mouseenter"><a href="#mouseover-与-mouseenter" class="headerlink" title="mouseover 与 mouseenter"></a>mouseover 与 mouseenter</h2><blockquote><p>mouseover 和 mouseoverenter 都有鼠标经过的意思，但是在注册鼠标经过事件的时候，推荐使用<code>mouseenter</code></p></blockquote><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=jquery_event_mouseenter_mouseover">mouseenter 与 mouseover 的不同</a></p><ol><li>mouseover与mouseout是一对事件，当鼠标经过当前元素或者当前元素的子元素的时候，mouseover事件都会触发【事件冒泡】。</li><li>mouseenter 与mouseleave是一对事件，只有当鼠标经过当前元素时，事件会触发，鼠标经过子元素，mousenter事件是不会触发的。</li><li>两者都有鼠标移入的效果，</li><li>后者会在当前元素上以及后代元素上触发事件，事件冒泡，</li><li>前者只会在当元素上触发，</li><li>所以我们在注册鼠标移入移出事件的时候我们推荐mouseenter和mouseleave。</li></ol><hr><h2 id="index方法"><a href="#index方法" class="headerlink" title="index方法"></a>index方法</h2><blockquote><p><code>index()</code>方法返回的是当前元素在所有兄弟元素里面的索引。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>当碰到这种结构的时候，推荐给li注册事件，这样通过index方法才能获取到正确的索引值。</strong></p><h2 id="我们在学习jQuery的时候要去区分jQuery与Javascript两者的区别"><a href="#我们在学习jQuery的时候要去区分jQuery与Javascript两者的区别" class="headerlink" title="我们在学习jQuery的时候要去区分jQuery与Javascript两者的区别"></a>我们在学习jQuery的时候要去区分jQuery与Javascript两者的区别</h2><p>JavaScript是一门编程语言，jQuery仅仅是用JavaScript实现的一个JavaScript库，目的是简化我们的开发。</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/1.png" alt="js和jq的区别"></p><blockquote><h2 id="再次感谢您阅读本篇文章，jQuery系列文章将会有多节，欢迎阅读全篇文章。"><a href="#再次感谢您阅读本篇文章，jQuery系列文章将会有多节，欢迎阅读全篇文章。" class="headerlink" title="再次感谢您阅读本篇文章，jQuery系列文章将会有多节，欢迎阅读全篇文章。"></a>再次感谢您阅读本篇文章，jQuery系列文章将会有多节，欢迎阅读全篇文章。</h2></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> JQuery </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JQuery </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 链式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让自己的电脑成为一台服务器(上)</title>
      <link href="/2020/12/06/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%B5%E8%84%91%E6%88%90%E4%B8%BA%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8-%E4%B8%8A/"/>
      <url>/2020/12/06/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%B5%E8%84%91%E6%88%90%E4%B8%BA%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8-%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<blockquote><h2 id="hello-大家好，我是泰戈尔，今天给大家讲讲如何让自己的电脑变成一台服务器"><a href="#hello-大家好，我是泰戈尔，今天给大家讲讲如何让自己的电脑变成一台服务器" class="headerlink" title="hello,大家好，我是泰戈尔，今天给大家讲讲如何让自己的电脑变成一台服务器"></a>hello,大家好，我是泰戈尔，今天给大家讲讲如何让自己的电脑变成一台服务器</h2></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png"></p><h2 id="初识服务器"><a href="#初识服务器" class="headerlink" title="初识服务器"></a>初识服务器</h2><blockquote><p>思考：我们写完一个项目，怎么让所有人都能访问到？？？？？？</p></blockquote><p>比如，如何让其他的亲朋好友看到我们之前写好的“品优购”或是“手机京东”？</p><p>基本实现思路如下：</p><ul><li>1.需要有一台供所有人都能访问的<strong>服务器</strong></li><li>2.将我们写好的项目上传到服务器上</li><li>3.其他人通过<strong>域名或IP</strong>来进行访问</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/95df59fc84beb.png"></p><p><strong>服务器</strong>：通俗的讲，能够提供某种服务的机器（计算机）称为服务器</p><h2 id="服务器与客户端"><a href="#服务器与客户端" class="headerlink" title="服务器与客户端"></a>服务器与客户端</h2><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><ul><li>概念：<strong>服务器</strong>（提供服务）指的就是一台<strong>安装特定的软件的计算机</strong>，用于专门用于提供特定的服务。</li><li>分类：按照服务类型的不同，又划分为：<strong>Web 服务器</strong>、数据库服务器、文件服务器等等</li></ul><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><ul><li>概念：<strong>客户端</strong>（使用服务）指的是在一次服务过程中使用这个服务的设备（网络端点）。</li><li>目前咱们最常见的客户端就是<strong>浏览器</strong></li></ul><p><strong>注：</strong></p><p>我们手头上的这些网页，如果想要成为一个网站，首先要完成的第一件事就是有一台公共的 Web 服务器</p><p>把这一系列的页面放到这台 Web 服务器上，让用户可以通过服务器的地址访问到这些网页。</p><h4 id="Web-服务器软件分类（了解）"><a href="#Web-服务器软件分类（了解）" class="headerlink" title="Web 服务器软件分类（了解）"></a>Web 服务器软件分类（了解）</h4><ul><li>Apache - php</li><li>IIS - C# .net</li><li>Tomcat - java</li><li>Nginx</li></ul><h2 id="安装phpStudy"><a href="#安装phpStudy" class="headerlink" title="安装phpStudy"></a>安装phpStudy</h2><p>要想让我们自己的电脑也变成一台<strong>服务器</strong>，就必须安装能<strong>提供对应服务</strong>的软件。</p><p>这里我们选择一个简单易用的服务器软件集成环境，内部集合了我们需要使用的服务器软件Apache、服务端开发语言php的执行环境、</p><p>以及数据库软件MySQL。</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/phpstudy.png"></p><p><strong>官方地址：</strong><a href="https://www.xp.cn/">https://www.xp.cn/</a> 先进行下载，然后再进行安装，安装方式如下。</p><p>**1.**解压后，以管理员身份运行或双击运行phpStudySetup.exe：</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/adminSetup.jpg"></p><p>**2.**界面会提示安装路径，使用默认路径即可，不要有中文路径，点击<code>是</code>：</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/2018-01-30_172343.png"></p><p>**3.**接下来等待安装完毕：</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/2018-01-30_172355.png"></p><p><strong>4.**安装完毕后可能会</strong>弹出更新提示<strong>，</strong>跳过**即可(如果没有则可忽略)。界面会呈现如下效果：</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/2018-01-30_172456.png"></p><p>**5.**点击启动，等待左侧红点变为绿色即为启动成功，</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/2018-01-30_174325.png"></p><p>**6.**现在可以打开浏览器，在地址栏中输入localhost并点击回车，页面会显示<code>Hello World</code>，恭喜你，phpStudy成功的安装完毕啦！</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/2018-01-30_172704.png"></p><p>**7.**如果想使用PHP更高版本，还可以进行版本切换：</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/php7.2.jpg"></p><p><strong>MAC电脑</strong>实现Apache功能 <a href="https://www.jianshu.com/p/1d86e7ce7f71">https://www.jianshu.com/p/1d86e7ce7f71</a></p><p>或<strong>实现phpStudy</strong>的集成环境：<a href="http://www.xsrvs.com/index.html">http://www.xsrvs.com/index.html</a></p><blockquote><h3 id="好了，文章上半节就先到这里，欢迎继续阅读文章的下半节内容。"><a href="#好了，文章上半节就先到这里，欢迎继续阅读文章的下半节内容。" class="headerlink" title="好了，文章上半节就先到这里，欢迎继续阅读文章的下半节内容。"></a>好了，文章上半节就先到这里，欢迎继续阅读文章的下半节内容。</h3></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> phpStudy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何让自己的电脑成为一台服务器(下)</title>
      <link href="/2020/12/06/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%B5%E8%84%91%E6%88%90%E4%B8%BA%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8-%E4%B8%8B/"/>
      <url>/2020/12/06/%E5%A6%82%E4%BD%95%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84%E7%94%B5%E8%84%91%E6%88%90%E4%B8%BA%E4%B8%80%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8-%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><h4 id="hello，大家好，我是泰戈尔，欢迎阅读《如何让自己的电脑成为服务器》文章的下节。"><a href="#hello，大家好，我是泰戈尔，欢迎阅读《如何让自己的电脑成为服务器》文章的下节。" class="headerlink" title="hello，大家好，我是泰戈尔，欢迎阅读《如何让自己的电脑成为服务器》文章的下节。"></a>hello，大家好，我是泰戈尔，欢迎阅读《如何让自己的电脑成为服务器》文章的下节。</h4></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png"></p><h2 id="phpStudy的端口设置"><a href="#phpStudy的端口设置" class="headerlink" title="phpStudy的端口设置"></a>phpStudy的端口设置</h2><p><strong>监听端口（了解）</strong></p><p>监听端口可以随意修改为任意一个未被其他程序监听的端口，</p><p>可以通过点击phpStudy软件底部右侧 <code>其他选项菜单</code> 中 <code>phpStudy 设置</code> 中的 <code>端口常规设置</code> 进行设置。()</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/Snipaste_2020-06-20_18-31-18.jpg"></p><p>采用默认<strong>80</strong>即可,如有冲突再行修改：</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/port.png"></p><h2 id="网站根目录与默认文档"><a href="#网站根目录与默认文档" class="headerlink" title="网站根目录与默认文档"></a>网站根目录与默认文档</h2><p><strong>网站根目录</strong> 就是存放我们网站文件的最顶层目录，通常 URL 中域名后面的第一个斜线对应（映射）的就是网站根目录。</p><p><strong>默认文档</strong> 又称为默认首页，指的是客户端访问的是一个目录（没有指定具体的文件），</p><p>服务端默认返回这个目录下的某个文档（文件），这个文档就称之为<strong>默认文档</strong>，通常是以<strong>index.html</strong>，index.php居多…</p><p>如果需要设置网站根目录与默认文档，可以通过点击phpStudy软件底部右侧 <code>其他选项菜单</code> 中 <code>phpStudy 设置</code> 中的 <code>端口常规设置</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/documentRoot-directoryIndex.png"></p><p><strong>注意：网站根目录不要包含中文字符，否则会导致apache服务器无法正常</strong></p><p>正常我们还是放在默认的目录中即可。</p><p><strong>允许目标列表：</strong></p><p>在服务器的根目录中如果没有默认的文档时，也想要看到根目录中的其它文件内容，则可以<strong>开启目标列表</strong>。</p><p>可以通过点击phpStudy软件底部右侧 <code>其他选项菜单</code> 中 <code>phpStudy 设置</code> 中的 <code>允许目录列表</code>，<strong>点一下即可</strong>。</p><p>注意：一定要<strong>重新启动服务器</strong>。</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/image-20191128120854276.png"></p><h2 id="网络相关概念"><a href="#网络相关概念" class="headerlink" title="网络相关概念"></a>网络相关概念</h2><h4 id="1-网卡与IP地址"><a href="#1-网卡与IP地址" class="headerlink" title="1. 网卡与IP地址"></a>1. 网卡与IP地址</h4><p><strong>网卡</strong></p><ul><li>网卡是一个专门负责网络通讯的硬件设备</li><li>IP地址就是设置在网卡上的地址信息</li></ul><blockquote><p>我们可以把<strong>电脑</strong>比作<strong>电话</strong>，网卡相相当于是<strong>SIM卡</strong>，<strong>IP地址</strong>就相当于是<strong>电话号码</strong></p></blockquote><p><strong>IP地址</strong></p><ul><li><strong>每台</strong>联网的电脑上<strong>都有IP地址</strong>，是保证电脑之间正常通讯的重要设置</li><li>每台电脑的IP地址<strong>不能相同</strong>，否则会出现IP地址冲突，并且没有办法正常通讯</li><li>简单之，IP址址就是用来<strong>定位</strong>或标识网络中的终端设备的，比如：一部手机，一台电脑…</li><li>查看本机的IP地址要使用命令：ipconfig(windows) ifconfig(Linux)</li><li>还有一个简单的方法：查看<strong>内网通</strong>或<strong>飞Q</strong>上的显示也可以</li></ul><h4 id="2-域名和端口号"><a href="#2-域名和端口号" class="headerlink" title="2. 域名和端口号"></a>2. 域名和端口号</h4><p><strong>域名</strong></p><ul><li>由一串<strong>用点分隔</strong>的名字组成，例如：<a href="http://www.iftiger.com/">www.iftiger.com</a></li><li>简言之，就是<strong>IP地址的别名</strong>，方便用户记忆</li></ul><p><strong>端口号</strong></p><ul><li><p><strong>IP地址</strong>：通过<strong>IP地址</strong>找到网络上的<strong>计算机</strong>或服务器</p></li><li><p><strong>端口号</strong>：通过<strong>端口号</strong>可以找到<strong>计算机</strong>或服务器上运行的<strong>应用程序</strong></p></li><li><p>可以通过在命令行中运行： <code>netstat -an</code> 命令监视本机端口使用情况</p></li><li><p>常见<strong>服务端口号</strong>列表：</p><p>| 序号 | 服务 | 端口号 | | —- | ————— | —— | | 01 | Web服务器(HTTP) | 80 | | 02 | HTTPS | 443 | | 03 | FTP服务器 | 21 | | 04 | SSH服务器 | 22 | | 05 | 数据库 | 3306 |</p></li></ul><h4 id="3-特殊的域名与IP"><a href="#3-特殊的域名与IP" class="headerlink" title="3. 特殊的域名与IP"></a>3. 特殊的域名与IP</h4><p><code>localhost</code> 含义为<strong>本地主机</strong>，对应的IP地址是：<strong>127.0.0.1</strong> 。</p><p>这是一个保留域名，主要用于本地测试，是任何一台计算机默认都拥有的。</p><h4 id="4-DNS服务器"><a href="#4-DNS服务器" class="headerlink" title="4.DNS服务器"></a>4.DNS服务器</h4><p><strong>DNS</strong>（Domain Name System）因特网上作为域名和IP地址相互映射的一个分布式数据库服务器。</p><p>简单的说就是记录IP地址和域名之间对应关系的服务。</p><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/05-1574866570461.png"></p><h3 id="5-URL-重要"><a href="#5-URL-重要" class="headerlink" title="5. URL(重要)"></a>5. URL(重要)</h3><p>URL（Uniform Resource Locator），统一资源定位符，通俗点来说就是表示网络当中某一个网页的完整访问地址，它具有一定的格式：</p><p>– 协议名称://域名:端口/文件目录(文件名称)?key=value&amp;key2=value2</p><h4 id="6-请求响应流程-重要"><a href="#6-请求响应流程-重要" class="headerlink" title="6.请求响应流程(重要)"></a>6.请求响应流程(重要)</h4><ol><li>用户打开浏览器</li><li>地址栏输入我们需要访问的网站网址（<code>URL</code>）</li><li>浏览器通过 <code>DNS 服务器</code> 获取即将访问的网站 <code>IP 地址</code></li><li>浏览器发起一个对这个 IP地址的 <code>请求</code></li><li>服务端监听指定的 <code>端口</code> 的服务器软件接收到这个请求，进行相应的处理</li><li>服务端将处理完的结果返回给客户端浏览器（<code>响应</code>）</li><li>浏览器将服务端返回的结果呈现到界面上</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/12/06/http-req-res.png"></p><blockquote><h4 id="好了，关于《如何让自己的佃农成为一台服务器》就先说到这里。干饭。"><a href="#好了，关于《如何让自己的佃农成为一台服务器》就先说到这里。干饭。" class="headerlink" title="好了，关于《如何让自己的佃农成为一台服务器》就先说到这里。干饭。"></a>好了，关于《如何让自己的佃农成为一台服务器》就先说到这里。干饭。</h4></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 服务器 </tag>
            
            <tag> phpStudy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SAMSUNG官方系统root教程(玩机教程二)</title>
      <link href="/2020/12/03/SAMSUNG%E5%AE%98%E6%96%B9%E7%B3%BB%E7%BB%9Froot%E6%95%99%E7%A8%8B(%E7%8E%A9%E6%9C%BA%E6%95%99%E7%A8%8B%E4%BA%8C)/"/>
      <url>/2020/12/03/SAMSUNG%E5%AE%98%E6%96%B9%E7%B3%BB%E7%BB%9Froot%E6%95%99%E7%A8%8B(%E7%8E%A9%E6%9C%BA%E6%95%99%E7%A8%8B%E4%BA%8C)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从实际开发角度了解Nginx</title>
      <link href="/2020/11/23/%E4%BB%8E%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E8%A7%92%E5%BA%A6%E4%BA%86%E8%A7%A3Nginx/"/>
      <url>/2020/11/23/%E4%BB%8E%E5%AE%9E%E9%99%85%E5%BC%80%E5%8F%91%E8%A7%92%E5%BA%A6%E4%BA%86%E8%A7%A3Nginx/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>hello,各位大佬下午好,这几天因为公司需要配置了Nginx,而在前端的开发工作中鲜少有机会能够接触到这类东西的,因为Nginx主要还是偏后端一点,所以很有幸的去更多的了解了一下Nginx,正好也记录一下这次学习的过程。</strong></p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png"></p><h4 id="在开始之前我们需要了解一下何为Nginx-它是做什么的-它为什么能够被广泛应用-而我们在前端的实际开发过程中在怎样的场景下使用Nginx。今天这篇文章就围绕这几个问题展开。顺便讲讲Nginx的使用教程。"><a href="#在开始之前我们需要了解一下何为Nginx-它是做什么的-它为什么能够被广泛应用-而我们在前端的实际开发过程中在怎样的场景下使用Nginx。今天这篇文章就围绕这几个问题展开。顺便讲讲Nginx的使用教程。" class="headerlink" title="在开始之前我们需要了解一下何为Nginx,它是做什么的,它为什么能够被广泛应用,而我们在前端的实际开发过程中在怎样的场景下使用Nginx。今天这篇文章就围绕这几个问题展开。顺便讲讲Nginx的使用教程。"></a>在开始之前我们需要了解一下何为Nginx,它是做什么的,它为什么能够被广泛应用,而我们在前端的实际开发过程中在怎样的场景下使用Nginx。今天这篇文章就围绕这几个问题展开。顺便讲讲Nginx的使用教程。</h4><blockquote><h6 id="首先Nginx是一款http服务器-它是一位来自俄罗斯的大佬采用C语言开发的软件-与其说它是软件不如说它是一款高性能的服务器以及代理服务器。本身身为前端开发者。应该很少接触到这个，但是在实际开发以及很多应用场景都需要用到Nginx，所以多了解一点对自身的发展并无坏处。"><a href="#首先Nginx是一款http服务器-它是一位来自俄罗斯的大佬采用C语言开发的软件-与其说它是软件不如说它是一款高性能的服务器以及代理服务器。本身身为前端开发者。应该很少接触到这个，但是在实际开发以及很多应用场景都需要用到Nginx，所以多了解一点对自身的发展并无坏处。" class="headerlink" title="首先Nginx是一款http服务器,它是一位来自俄罗斯的大佬采用C语言开发的软件.与其说它是软件不如说它是一款高性能的服务器以及代理服务器。本身身为前端开发者。应该很少接触到这个，但是在实际开发以及很多应用场景都需要用到Nginx，所以多了解一点对自身的发展并无坏处。"></a>首先Nginx是一款http服务器,它是一位来自俄罗斯的大佬采用C语言开发的软件.与其说它是软件不如说它是一款高性能的服务器以及代理服务器。本身身为前端开发者。应该很少接触到这个，但是在实际开发以及很多应用场景都需要用到Nginx，所以多了解一点对自身的发展并无坏处。</h6></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/11/23/0c7e07fae2bb1.jpg"></p><blockquote><h6 id="Nginx作为一款http服务器和代理服务器，那么它能够做一些什么事情呢，首先它作为http服务器。它就可以开启http服务，提供独立的http服务。可以用作网页静态的服务器。"><a href="#Nginx作为一款http服务器和代理服务器，那么它能够做一些什么事情呢，首先它作为http服务器。它就可以开启http服务，提供独立的http服务。可以用作网页静态的服务器。" class="headerlink" title="Nginx作为一款http服务器和代理服务器，那么它能够做一些什么事情呢，首先它作为http服务器。它就可以开启http服务，提供独立的http服务。可以用作网页静态的服务器。"></a>Nginx作为一款http服务器和代理服务器，那么它能够做一些什么事情呢，首先它作为http服务器。它就可以开启http服务，提供独立的http服务。可以用作网页静态的服务器。</h6><h6 id="其次它还可以被应用在虚拟主机上-可以实现在同一台服务器上虚拟出多个网站。比如您当前访问的个人网站它的服务器也是采用虚拟主机的形式为用户提供服务的。"><a href="#其次它还可以被应用在虚拟主机上-可以实现在同一台服务器上虚拟出多个网站。比如您当前访问的个人网站它的服务器也是采用虚拟主机的形式为用户提供服务的。" class="headerlink" title="其次它还可以被应用在虚拟主机上,可以实现在同一台服务器上虚拟出多个网站。比如您当前访问的个人网站它的服务器也是采用虚拟主机的形式为用户提供服务的。"></a>其次它还可以被应用在虚拟主机上,可以实现在同一台服务器上虚拟出多个网站。比如您当前访问的个人网站它的服务器也是采用虚拟主机的形式为用户提供服务的。</h6><h6 id="当然它最重要的作用是能够实现反向代理的功能-这里多嘴一句-有反向代理就有正向代理-那么何为正向代理。在正常的情况下，去代理用户去访问服务器，需要用户手动设置代理服务器的ip和端口号。"><a href="#当然它最重要的作用是能够实现反向代理的功能-这里多嘴一句-有反向代理就有正向代理-那么何为正向代理。在正常的情况下，去代理用户去访问服务器，需要用户手动设置代理服务器的ip和端口号。" class="headerlink" title="当然它最重要的作用是能够实现反向代理的功能,这里多嘴一句,有反向代理就有正向代理,那么何为正向代理。在正常的情况下，去代理用户去访问服务器，需要用户手动设置代理服务器的ip和端口号。"></a>当然它最重要的作用是能够实现反向代理的功能,这里多嘴一句,有反向代理就有正向代理,那么何为正向代理。在正常的情况下，去代理用户去访问服务器，需要用户手动设置代理服务器的ip和端口号。</h6><h6 id="而反向代理则是通过代理服务器，代理用户要去访问的目标服务器，通过代理服务器去接受请求，然后转发给内网的服务器，这种多个服务器共同工作的场景也被称为“集群化”。最后将从内网服务器得到的结果返回给客户端，在这种情况下，代理服务器对外就表现为只有一个服务器。"><a href="#而反向代理则是通过代理服务器，代理用户要去访问的目标服务器，通过代理服务器去接受请求，然后转发给内网的服务器，这种多个服务器共同工作的场景也被称为“集群化”。最后将从内网服务器得到的结果返回给客户端，在这种情况下，代理服务器对外就表现为只有一个服务器。" class="headerlink" title="而反向代理则是通过代理服务器，代理用户要去访问的目标服务器，通过代理服务器去接受请求，然后转发给内网的服务器，这种多个服务器共同工作的场景也被称为“集群化”。最后将从内网服务器得到的结果返回给客户端，在这种情况下，代理服务器对外就表现为只有一个服务器。"></a>而反向代理则是通过代理服务器，代理用户要去访问的目标服务器，通过代理服务器去接受请求，然后转发给内网的服务器，这种多个服务器共同工作的场景也被称为“集群化”。最后将从内网服务器得到的结果返回给客户端，在这种情况下，代理服务器对外就表现为只有一个服务器。</h6><h6 id="其实它还有一个功能在实际开发中也常用到，就是负载均衡。负载均衡顾名思义，就是将从用户那里接收到的数据流量等平分给多个服务器去执行。从而减轻每台服务器的压力。刚刚又提到集群化，就是让多台服务器共同完成工作任务。而当每台服务器都能完成更多的工作任务时，整体提升了集群的吞吐量。（能够处理的总数据量变高了。）"><a href="#其实它还有一个功能在实际开发中也常用到，就是负载均衡。负载均衡顾名思义，就是将从用户那里接收到的数据流量等平分给多个服务器去执行。从而减轻每台服务器的压力。刚刚又提到集群化，就是让多台服务器共同完成工作任务。而当每台服务器都能完成更多的工作任务时，整体提升了集群的吞吐量。（能够处理的总数据量变高了。）" class="headerlink" title="其实它还有一个功能在实际开发中也常用到，就是负载均衡。负载均衡顾名思义，就是将从用户那里接收到的数据流量等平分给多个服务器去执行。从而减轻每台服务器的压力。刚刚又提到集群化，就是让多台服务器共同完成工作任务。而当每台服务器都能完成更多的工作任务时，整体提升了集群的吞吐量。（能够处理的总数据量变高了。）"></a>其实它还有一个功能在实际开发中也常用到，就是负载均衡。负载均衡顾名思义，就是将从用户那里接收到的数据流量等平分给多个服务器去执行。从而减轻每台服务器的压力。刚刚又提到集群化，就是让多台服务器共同完成工作任务。而当每台服务器都能完成更多的工作任务时，整体提升了集群的吞吐量。（能够处理的总数据量变高了。）</h6><h6 id="其实Nginx还有一个智能的功能，就是它能够将动态请求和静态请求分开来，这样合理的配置服务器的资源，能够使服务器的整个系统的性能和效率提高。这种智能高效的功能可以称它为动静分离。"><a href="#其实Nginx还有一个智能的功能，就是它能够将动态请求和静态请求分开来，这样合理的配置服务器的资源，能够使服务器的整个系统的性能和效率提高。这种智能高效的功能可以称它为动静分离。" class="headerlink" title="其实Nginx还有一个智能的功能，就是它能够将动态请求和静态请求分开来，这样合理的配置服务器的资源，能够使服务器的整个系统的性能和效率提高。这种智能高效的功能可以称它为动静分离。"></a>其实Nginx还有一个智能的功能，就是它能够将动态请求和静态请求分开来，这样合理的配置服务器的资源，能够使服务器的整个系统的性能和效率提高。这种智能高效的功能可以称它为动静分离。</h6></blockquote><hr><h5 id="在了解到Nginx能够做这么多事情之后，或许应该思考它为什么能够被广泛应用，"><a href="#在了解到Nginx能够做这么多事情之后，或许应该思考它为什么能够被广泛应用，" class="headerlink" title="在了解到Nginx能够做这么多事情之后，或许应该思考它为什么能够被广泛应用，"></a>在了解到Nginx能够做这么多事情之后，或许应该思考它为什么能够被广泛应用，</h5><h6 id="Nginx之所以能够被广泛应用是因为其具有以下一些特性"><a href="#Nginx之所以能够被广泛应用是因为其具有以下一些特性" class="headerlink" title="Nginx之所以能够被广泛应用是因为其具有以下一些特性:"></a>Nginx之所以能够被广泛应用是因为其具有以下一些特性:</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">轻量级</span><br><span class="line">高性能</span><br><span class="line">稳定性</span><br><span class="line">并发性好,</span><br><span class="line">&#x2F;&#x2F;当然除了以上一些显著的特点意外其实它还有一些优点比如:</span><br><span class="line">跨平台-----Nginx不仅能运行于win、Mac还有其他小众平台也能运行。</span><br><span class="line">其结构为master&#x2F;worker结构:一个master进程,可以生成一个或多个worker进程。</span><br><span class="line">开源--------其本身作为一款开源软件就很讨一些开源爱好者的喜。</span><br><span class="line">内置检查功能-------如果nginx代理的后端web服务器宕机了，不会影响我们前端去访问。</span><br><span class="line">剩下的有人看到的来编一个吧。</span><br></pre></td></tr></table></figure><h4 id="下面通过几张图来更直观的了解下其内部的工作机制及运行原理"><a href="#下面通过几张图来更直观的了解下其内部的工作机制及运行原理" class="headerlink" title="下面通过几张图来更直观的了解下其内部的工作机制及运行原理"></a>下面通过几张图来更直观的了解下其内部的工作机制及运行原理</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E5%88%86%E5%8F%91%E5%A4%84%E7%90%86.png"></p><hr><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1.png"></p><hr><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/master%E5%92%8Cworker.png"></p><hr><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/nginx%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png"></p><blockquote><h5 id="最后说了这么多，Nginx在我们前端开发中到底能做些什么呢-该怎么样去使用Nginx呢，文章的下半部分将会介绍到。"><a href="#最后说了这么多，Nginx在我们前端开发中到底能做些什么呢-该怎么样去使用Nginx呢，文章的下半部分将会介绍到。" class="headerlink" title="最后说了这么多，Nginx在我们前端开发中到底能做些什么呢,该怎么样去使用Nginx呢，文章的下半部分将会介绍到。"></a>最后说了这么多，Nginx在我们前端开发中到底能做些什么呢,该怎么样去使用Nginx呢，文章的下半部分将会介绍到。</h5></blockquote><blockquote><h5 id="在前端的实际开发过程中，主要使用到的Nginx的功能就是反向代理，面试题也会经常问到前端开发过程中如何结果跨域等问题，都跟这个Nginx脱不开关系。"><a href="#在前端的实际开发过程中，主要使用到的Nginx的功能就是反向代理，面试题也会经常问到前端开发过程中如何结果跨域等问题，都跟这个Nginx脱不开关系。" class="headerlink" title="在前端的实际开发过程中，主要使用到的Nginx的功能就是反向代理，面试题也会经常问到前端开发过程中如何结果跨域等问题，都跟这个Nginx脱不开关系。"></a>在前端的实际开发过程中，主要使用到的Nginx的功能就是反向代理，面试题也会经常问到前端开发过程中如何结果跨域等问题，都跟这个Nginx脱不开关系。</h5><h5 id="Nginx通过反向代理服务器，接收客户端的网络访问请求，然后服务器将请求通过其事先定好的规则去转发给公司企业个人的一些能够执行业务的服务器。最后将从这些服务器返回的结果，返回给发起连接请求的客户端。"><a href="#Nginx通过反向代理服务器，接收客户端的网络访问请求，然后服务器将请求通过其事先定好的规则去转发给公司企业个人的一些能够执行业务的服务器。最后将从这些服务器返回的结果，返回给发起连接请求的客户端。" class="headerlink" title="Nginx通过反向代理服务器，接收客户端的网络访问请求，然后服务器将请求通过其事先定好的规则去转发给公司企业个人的一些能够执行业务的服务器。最后将从这些服务器返回的结果，返回给发起连接请求的客户端。"></a>Nginx通过反向代理服务器，接收客户端的网络访问请求，然后服务器将请求通过其事先定好的规则去转发给公司企业个人的一些能够执行业务的服务器。最后将从这些服务器返回的结果，返回给发起连接请求的客户端。</h5></blockquote><hr><blockquote><h5 id="Nginx使用方法：（很笼统）"><a href="#Nginx使用方法：（很笼统）" class="headerlink" title="Nginx使用方法：（很笼统）"></a>Nginx使用方法：（很笼统）</h5><h5 id="1-首先下载当前系统环境下可以正常使用的Nginx版本的压缩包，然后将压缩包解压后打开，会看到如下图所示："><a href="#1-首先下载当前系统环境下可以正常使用的Nginx版本的压缩包，然后将压缩包解压后打开，会看到如下图所示：" class="headerlink" title="1.首先下载当前系统环境下可以正常使用的Nginx版本的压缩包，然后将压缩包解压后打开，会看到如下图所示："></a>1.首先下载当前系统环境下可以正常使用的Nginx版本的压缩包，然后将压缩包解压后打开，会看到如下图所示：</h5></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/11/24/2fea02aa84db8.png"></p><blockquote><h5 id="2-对于前端这块而言-我们需要将打包好的代码-执行build指令后-移至html文件夹内"><a href="#2-对于前端这块而言-我们需要将打包好的代码-执行build指令后-移至html文件夹内" class="headerlink" title="2.对于前端这块而言,我们需要将打包好的代码(执行build指令后)移至html文件夹内,"></a>2.对于前端这块而言,我们需要将打包好的代码(执行build指令后)移至html文件夹内,</h5></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/nginx%E4%B8%8B%E7%9A%84html%E7%9B%AE%E5%BD%95.png"></p><blockquote><h5 id="3-在Nginx文件夹目录下找到conf文件夹-找到nginx-conf文件-以记事本或者notepad等方式打开-直接找到server处"><a href="#3-在Nginx文件夹目录下找到conf文件夹-找到nginx-conf文件-以记事本或者notepad等方式打开-直接找到server处" class="headerlink" title="3.在Nginx文件夹目录下找到conf文件夹,找到nginx.conf文件,以记事本或者notepad等方式打开,直接找到server处,"></a>3.在Nginx文件夹目录下找到conf文件夹,找到nginx.conf文件,以记事本或者notepad等方式打开,直接找到server处,</h5></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">server &#123;</span><br><span class="line"># 这里是服务启动后监听的端口,</span><br><span class="line">    listen 8080;</span><br><span class="line">    # 这里是启动时需要被代理的地址,</span><br><span class="line">    server_name localhost;</span><br><span class="line">    #启动后,在地址栏会代理到下面的ip地址和端口号以及拼接路径data,也就是http:&#x2F;&#x2F;145.45.4.5:81&#x2F;data...这种形式。</span><br><span class="line">    location &#x2F;data &#123;</span><br><span class="line">        proxy_pass http:&#x2F;&#x2F;145.45.4.5:81;</span><br><span class="line">    &#125;</span><br><span class="line">    #还可以监听多个地址,因为在实际开发中会有很多的地址,都需要去配置代理,配置下方的地址可能会连上公司内部的生产测试环境等,而配置上方的ip则可能会跟后端更方便的连调接口,提升开发效率。</span><br><span class="line">    location &#x2F;serve ｛</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;baidudev.baidutest.com:81&#x2F;serve;</span><br><span class="line">    ｝</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="4-最后通过命令行工具启动Nginx服务，"><a href="#4-最后通过命令行工具启动Nginx服务，" class="headerlink" title="4.最后通过命令行工具启动Nginx服务，"></a>4.最后通过命令行工具启动Nginx服务，</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">可以直接在nginx文件夹根目录单击地址栏输入cmd启动命令行工具,</span><br><span class="line">老规矩nginx -v 查看当前nginx版本,</span><br><span class="line">输入启动指令,</span><br><span class="line">&gt; start nginx</span><br><span class="line">启动完成后,最好在代码编辑器内重启服务。</span><br><span class="line"></span><br><span class="line">停止nginx服务</span><br><span class="line">&gt;nginx -s stop</span><br><span class="line"></span><br><span class="line">重启nginx服务</span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line">完整有序的停止nginx</span><br><span class="line">nginx -s quit</span><br><span class="line"></span><br><span class="line">测试nginx的配置文件是否正确</span><br><span class="line">nginx -t -c &#x2F;path&#x2F;to&#x2F;nginx.conf</span><br><span class="line"></span><br><span class="line">查看日志文件</span><br><span class="line">nginx -s reopen</span><br><span class="line"></span><br><span class="line">一般直接双击nginx.exe文件也可以启动nginx服务,窗口闪动一下代表服务已启动。</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 反向代理 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue的双向数据绑定原理</title>
      <link href="/2020/09/23/Vue%E7%9A%84%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/"/>
      <url>/2020/09/23/Vue%E7%9A%84%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正在码字中......</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flex布局详解</title>
      <link href="/2020/08/20/Flex%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/08/20/Flex%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-各位大佬-我是泰戈尔-今天给大家总结以下Flex布局"><a href="#hello-各位大佬-我是泰戈尔-今天给大家总结以下Flex布局" class="headerlink" title="hello,各位大佬,我是泰戈尔,今天给大家总结以下Flex布局,"></a><strong>hello,各位大佬,我是泰戈尔,今天给大家总结以下Flex布局,</strong></h2><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png"></p><h5 id="为什么会有网页布局这一说"><a href="#为什么会有网页布局这一说" class="headerlink" title="为什么会有网页布局这一说"></a>为什么会有网页布局这一说</h5><blockquote><p>因为传统的布局解决方案,是基于盒模型,依赖display属性和position属性和float属性,他对于那些特殊的布局非常不方便,因此不久后Flex布局应运而生,它的出现可以简便.完整,响应式的实现各种页面布局,</p></blockquote><hr><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/2020/11/23/52c5b986a6990.png" alt="CSS Flexbox"></p><hr><h3 id="现在已经全部支持市场上的浏览器-并且兼容性良好-下面我们一起来看看吧"><a href="#现在已经全部支持市场上的浏览器-并且兼容性良好-下面我们一起来看看吧" class="headerlink" title="现在已经全部支持市场上的浏览器,并且兼容性良好,下面我们一起来看看吧"></a>现在已经全部支持市场上的浏览器,并且兼容性良好,下面我们一起来看看吧</h3><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E6%94%AF%E6%8C%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8.jpg" alt="支持的浏览器"></p><h3 id="首先我们需要了解一下相关概念–什么是Flex布局"><a href="#首先我们需要了解一下相关概念–什么是Flex布局" class="headerlink" title="首先我们需要了解一下相关概念–什么是Flex布局?"></a>首先我们需要了解一下相关概念–什么是Flex布局?</h3><h6 id="Flex是Flexible-Box的缩写-意思是”弹性布局”-用来为盒装-模型提供最大的灵活性"><a href="#Flex是Flexible-Box的缩写-意思是”弹性布局”-用来为盒装-模型提供最大的灵活性" class="headerlink" title="Flex是Flexible Box的缩写,意思是”弹性布局”,用来为盒装#模型提供最大的灵活性."></a>Flex是Flexible Box的缩写,意思是”弹性布局”,用来为盒装#模型提供最大的灵活性.</h6><h6 id="任何一个容器都可以指定为Flex布局"><a href="#任何一个容器都可以指定为Flex布局" class="headerlink" title="任何一个容器都可以指定为Flex布局"></a>任何一个容器都可以指定为Flex布局</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一个块级元素可以当作一个容器,使用Flex布局</span><br><span class="line">.box &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 行内元素也可以当作一个容器,使用Flex布局</span><br><span class="line">.box &#123;</span><br><span class="line">    display: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="因为浏览器的内核不同-考虑兼容性-所以我们要在Webkit内核的浏览器上加上-webkit前缀"><a href="#因为浏览器的内核不同-考虑兼容性-所以我们要在Webkit内核的浏览器上加上-webkit前缀" class="headerlink" title="因为浏览器的内核不同,考虑兼容性,所以我们要在Webkit内核的浏览器上加上-webkit前缀."></a>因为浏览器的内核不同,考虑兼容性,所以我们要在Webkit内核的浏览器上加上-webkit前缀.</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这样在属性值前面加上-webkit以-隔开的话,可以让webkit内核的浏览器也可以使用Flex布局.</span><br><span class="line">.box&#123;</span><br><span class="line">  display: -webkit-flex; &#x2F;* Safari *&#x2F;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p></blockquote><h5 id="采用Flex布局的元素-称为Flex容器-flex-container-简称”容器”-它的所有子元素-自动成为此容器的成员-称为Flex项目-flex-item-简称’项目’"><a href="#采用Flex布局的元素-称为Flex容器-flex-container-简称”容器”-它的所有子元素-自动成为此容器的成员-称为Flex项目-flex-item-简称’项目’" class="headerlink" title="采用Flex布局的元素,称为Flex容器(flex container),简称”容器”,它的所有子元素,自动成为此容器的成员,称为Flex项目(flex item),简称’项目’."></a>采用Flex布局的元素,称为Flex容器(flex container),简称”容器”,它的所有子元素,自动成为此容器的成员,称为Flex项目(flex item),简称’项目’.</h5><hr><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" alt="flex item"></p><hr><h3 id="容器默认存在两根轴-水平的主轴-mian-axis-和垂直的交叉轴-cross-axis-类似于数学函数中的坐标轴-主轴的开始位置-与边框的交叉点-叫做main-start-结束位置叫做main-end-交叉轴的开始位置叫做cross-start-结束位置叫做cross-end"><a href="#容器默认存在两根轴-水平的主轴-mian-axis-和垂直的交叉轴-cross-axis-类似于数学函数中的坐标轴-主轴的开始位置-与边框的交叉点-叫做main-start-结束位置叫做main-end-交叉轴的开始位置叫做cross-start-结束位置叫做cross-end" class="headerlink" title="容器默认存在两根轴: 水平的主轴(mian axis) 和垂直的交叉轴(cross axis),类似于数学函数中的坐标轴.主轴的开始位置,(与边框的交叉点)叫做main start, 结束位置叫做main end; 交叉轴的开始位置叫做cross start,结束位置叫做cross end."></a>容器默认存在两根轴: 水平的主轴(mian axis) 和垂直的交叉轴(cross axis),类似于数学函数中的坐标轴.主轴的开始位置,(与边框的交叉点)叫做main start, 结束位置叫做main end; 交叉轴的开始位置叫做cross start,结束位置叫做cross end.</h3><h4 id="被设置flex属性的容器会有六个属性"><a href="#被设置flex属性的容器会有六个属性" class="headerlink" title="被设置flex属性的容器会有六个属性"></a>被设置flex属性的容器会有六个属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. flex-direction</span><br><span class="line"></span><br><span class="line">2. flex-wrap</span><br><span class="line"></span><br><span class="line">3. flex-flow</span><br><span class="line"></span><br><span class="line">4. justify-content</span><br><span class="line"></span><br><span class="line">5. align-items</span><br><span class="line"></span><br><span class="line">6.align-content</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>flex-direction属性</p></blockquote><h6 id="flex-direction属性决定主轴的方向（即项目的排列方向）。"><a href="#flex-direction属性决定主轴的方向（即项目的排列方向）。" class="headerlink" title="flex-direction属性决定主轴的方向（即项目的排列方向）。"></a><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 此时容器内项目的排列方向由flex-direction决定</span><br><span class="line">.box &#123;</span><br><span class="line">  flex-direction: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="flex-direction有四个值"><a href="#flex-direction有四个值" class="headerlink" title="flex-direction有四个值."></a><code>flex-direction</code>有四个值.</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1, row(默认值):主轴为水平方向,起点在左端,</span><br><span class="line"></span><br><span class="line">2, row-reverse: 主轴为水平方向,起点在右端,</span><br><span class="line"></span><br><span class="line">3, column: 主轴为垂直方向,起点在上沿,</span><br><span class="line"></span><br><span class="line">4, column-reverse: 主轴为垂直方向,起点在下沿,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png"></p><hr><blockquote><p>flex-wrap属性</p></blockquote><h6 id="默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。"><a href="#默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。" class="headerlink" title="默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。"></a>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</h6><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="flex-wrap有三个值"><a href="#flex-wrap有三个值" class="headerlink" title="flex-wrap有三个值,"></a><code>flex-wrap</code>有三个值,</h6><blockquote><p>1, <code>nowrap</code>（默认):不换行.</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png"></p><blockquote><p>2, <code>wrap</code>：换行，第一行在上方.</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg"></p><blockquote><p>3, <code>wrap-reverse</code>：换行，第一行在下方</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg"></p><hr><blockquote><p>flex-flow属性</p></blockquote><h6 id="flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row-nowrap。"><a href="#flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row-nowrap。" class="headerlink" title="flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。"></a><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># flex-flow属性是前面两种属性的简写的组合形式,</span><br><span class="line">.box &#123;</span><br><span class="line">  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>justify-content属性</p></blockquote><h6 id="justify-content属性定义了每个子元素在主轴上的对齐方式"><a href="#justify-content属性定义了每个子元素在主轴上的对齐方式" class="headerlink" title="justify-content属性定义了每个子元素在主轴上的对齐方式"></a><code>justify-content</code>属性定义了每个子元素在主轴上的对齐方式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png"></p><hr><blockquote><p>justify-content可以有五个值,</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1, flex-start（默认值）：左对齐</span><br><span class="line"></span><br><span class="line">2, flex-end：右对齐</span><br><span class="line"></span><br><span class="line">3, center： 居中</span><br><span class="line"></span><br><span class="line">4, space-between：两端对齐，项目之间的间隔都相等。</span><br><span class="line"></span><br><span class="line">5, space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>align-items属性</p></blockquote><h6 id="align-items属性定义项目在交叉轴上如何对齐"><a href="#align-items属性定义项目在交叉轴上如何对齐" class="headerlink" title="align-items属性定义项目在交叉轴上如何对齐"></a><code>align-items</code>属性定义项目在交叉轴上如何对齐</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  align-items: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png"></p><blockquote><p>align-items有五个值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flex-start：交叉轴的起点对齐。</span><br><span class="line"></span><br><span class="line">flex-end：交叉轴的终点对齐。</span><br><span class="line"></span><br><span class="line">center：交叉轴的中点对齐。</span><br><span class="line"></span><br><span class="line">baseline: 项目的第一行文字的基线对齐。</span><br><span class="line"></span><br><span class="line">stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote><p>align-content属性</p></blockquote><h6 id="align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用"><a href="#align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用" class="headerlink" title="align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用"></a><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png"></p><hr><blockquote><p>align-content有六个值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">flex-start：与交叉轴的起点对齐。</span><br><span class="line"></span><br><span class="line">flex-end：与交叉轴的终点对齐。</span><br><span class="line"></span><br><span class="line">center：与交叉轴的中点对齐。</span><br><span class="line"></span><br><span class="line">space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</span><br><span class="line"></span><br><span class="line">space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</span><br><span class="line"></span><br><span class="line">stretch（默认值）：轴线占满整个交叉轴。</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h3 id="当给一个容器设置flex属性的时候-那么其内部的所有元素也同时有了一些属性下面我们一起来看一看"><a href="#当给一个容器设置flex属性的时候-那么其内部的所有元素也同时有了一些属性下面我们一起来看一看" class="headerlink" title="当给一个容器设置flex属性的时候,那么其内部的所有元素也同时有了一些属性下面我们一起来看一看,"></a>当给一个容器设置flex属性的时候,那么其内部的所有元素也同时有了一些属性下面我们一起来看一看,</h3></blockquote><h6 id="以下属性是设置在容器内部的元素上的"><a href="#以下属性是设置在容器内部的元素上的" class="headerlink" title="以下属性是设置在容器内部的元素上的"></a>以下属性是设置在容器内部的元素上的</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">order</span><br><span class="line"></span><br><span class="line">flex-grow</span><br><span class="line"></span><br><span class="line">flex-shrink</span><br><span class="line"></span><br><span class="line">flex-basis</span><br><span class="line"></span><br><span class="line">flex</span><br><span class="line"></span><br><span class="line">align-self</span><br></pre></td></tr></table></figure><blockquote><h6 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h6></blockquote><h6 id="order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0"><a href="#order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0" class="headerlink" title="order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0"></a><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  order: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png"></p><hr><blockquote><h6 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h6></blockquote><h6 id="flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大"><a href="#flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大" class="headerlink" title="flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大"></a><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  flex-grow: &lt;number&gt;; &#x2F;* default 0 *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png"></p><hr><blockquote><h4 id="如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍"><a href="#如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍" class="headerlink" title="如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍"></a>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍</h4></blockquote><blockquote><h6 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h6></blockquote><h6 id="flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小"><a href="#flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小" class="headerlink" title="flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小"></a><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  flex-shrink: &lt;number&gt;; &#x2F;* default 1 *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg"></p><hr><blockquote><h4 id="如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小-负值对该属性无效"><a href="#如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小-负值对该属性无效" class="headerlink" title="如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小,负值对该属性无效"></a>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小,负值对该属性无效</h4></blockquote><blockquote><h6 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h6></blockquote><h6 id="flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main-size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小"><a href="#flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main-size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小" class="headerlink" title="flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小"></a><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  flex-basis: &lt;length&gt; | auto; &#x2F;* default auto *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间"><a href="#它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间" class="headerlink" title="它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间"></a>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间</h5></blockquote><blockquote><h6 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h6></blockquote><h6 id="flex属性是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选"><a href="#flex属性是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选" class="headerlink" title="flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选"></a><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex: none | [ &lt;&#39;flex-grow&#39;&gt; &lt;&#39;flex-shrink&#39;&gt;? || &lt;&#39;flex-basis&#39;&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="该属性有两个快捷值：auto-1-1-auto-和-none-0-0-auto-。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值"><a href="#该属性有两个快捷值：auto-1-1-auto-和-none-0-0-auto-。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值" class="headerlink" title="该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值"></a>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</h5></blockquote><hr><blockquote><h6 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h6></blockquote><h6 id="align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch"><a href="#align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch" class="headerlink" title="align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch"></a><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png"></p><blockquote><h4 id="该属性可以有6个值-除了auto-其他的值都与align-items属性完全一致"><a href="#该属性可以有6个值-除了auto-其他的值都与align-items属性完全一致" class="headerlink" title="该属性可以有6个值,除了auto,其他的值都与align-items属性完全一致"></a>该属性可以有6个值,除了auto,其他的值都与align-items属性完全一致</h4></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Flex布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SAMSUNG刷第三方ROM教程(玩机教程一)</title>
      <link href="/2019/09/18/SAMSUNG%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9ROM%E6%95%99%E7%A8%8B(%E7%8E%A9%E6%9C%BA%E6%95%99%E7%A8%8B%E4%B8%80)/"/>
      <url>/2019/09/18/SAMSUNG%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9ROM%E6%95%99%E7%A8%8B(%E7%8E%A9%E6%9C%BA%E6%95%99%E7%A8%8B%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="hello-大家好-我是泰戈尔-今天给大家分享一下三星手机-根据综合性考虑-建议外版手机刷机-这样造成的损失较小-刷第三方ROM的教程"><a href="#hello-大家好-我是泰戈尔-今天给大家分享一下三星手机-根据综合性考虑-建议外版手机刷机-这样造成的损失较小-刷第三方ROM的教程" class="headerlink" title="hello,大家好,我是泰戈尔,今天给大家分享一下三星手机(根据综合性考虑,建议外版手机刷机,这样造成的损失较小)刷第三方ROM的教程"></a>hello,大家好,我是泰戈尔,今天给大家分享一下三星手机(根据综合性考虑,建议外版手机刷机,这样造成的损失较小)刷第三方ROM的教程</h3></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png"></p><hr><blockquote><h3 id="首先我们在拿到新机的时候-一般都是有BL锁的-如果不知道BL锁是什么-请自行查阅-于是呢-我们第一步先解BL锁-这是刷机必须要操作的一步-认真看哦"><a href="#首先我们在拿到新机的时候-一般都是有BL锁的-如果不知道BL锁是什么-请自行查阅-于是呢-我们第一步先解BL锁-这是刷机必须要操作的一步-认真看哦" class="headerlink" title="首先我们在拿到新机的时候,一般都是有BL锁的,(如果不知道BL锁是什么,请自行查阅),于是呢,我们第一步先解BL锁,这是刷机必须要操作的一步,认真看哦,"></a>首先我们在拿到新机的时候,一般都是有BL锁的,(如果不知道BL锁是什么,请自行查阅),于是呢,我们第一步先解BL锁,这是刷机必须要操作的一步,认真看哦,</h3></blockquote><blockquote><h3 id="本教程适用于外版手机"><a href="#本教程适用于外版手机" class="headerlink" title="本教程适用于外版手机,"></a>本教程适用于外版手机,</h3></blockquote><h2 id="如何辨别自己的手机是什么版本-必看-首先三星GALAXY旗舰机分为S系列和Note系列"><a href="#如何辨别自己的手机是什么版本-必看-首先三星GALAXY旗舰机分为S系列和Note系列" class="headerlink" title="如何辨别自己的手机是什么版本(必看),首先三星GALAXY旗舰机分为S系列和Note系列"></a>如何辨别自己的手机是什么版本(必看),首先三星GALAXY旗舰机分为S系列和Note系列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SM-GxxxN--------G表示该机器是S系列的机器,N表示地区代码韩国,即韩版</span><br><span class="line">SM-GxxxF--------G表示该机器是S系列的机器,F表示地区代码欧洲,即欧版</span><br><span class="line">SM-GxxxU--------G表示该机器是S系列的机器,U表示地区代码美国,即美版(请注意,如果你的手机型号为这个,那么该篇教程不完全适用于你)</span><br><span class="line"></span><br><span class="line">SM-NxxxN--------第一个N表示该机器是Note系列的机器,第二个N表示地区代码韩国,即韩版</span><br><span class="line">SM-NxxxF--------N表示该机器是Note系列的机器,F表示地区代码欧洲,即欧版</span><br><span class="line">SM-NxxxU--------N表示该机器是Note系列的机器,U表示地区代码美国,即美版(请注意,如果你的手机型号为这个,那么该篇教程不完全适用于你)</span><br></pre></td></tr></table></figure><blockquote><h3 id="rec即恢复模式-我们这里使用的rec为第三方恢复模式-通俗来说就是刷机模式"><a href="#rec即恢复模式-我们这里使用的rec为第三方恢复模式-通俗来说就是刷机模式" class="headerlink" title="rec即恢复模式,我们这里使用的rec为第三方恢复模式,通俗来说就是刷机模式,"></a>rec即恢复模式,我们这里使用的rec为第三方恢复模式,通俗来说就是刷机模式,</h3><h2 id="twrp文件里面携带一个-img格式的文件-是一个镜像文件-如果你不是大神-请不要擅自修改-会出现不可预估的问题。"><a href="#twrp文件里面携带一个-img格式的文件-是一个镜像文件-如果你不是大神-请不要擅自修改-会出现不可预估的问题。" class="headerlink" title="twrp文件里面携带一个.img格式的文件,是一个镜像文件,如果你不是大神,请不要擅自修改,会出现不可预估的问题。"></a>twrp文件里面携带一个.img格式的文件,是一个镜像文件,如果你不是大神,请不要擅自修改,会出现不可预估的问题。</h2></blockquote><h4 id="首先将手机关机-并且将手机通过数据线-建议原装的-连接电脑"><a href="#首先将手机关机-并且将手机通过数据线-建议原装的-连接电脑" class="headerlink" title="首先将手机关机,并且将手机通过数据线(建议原装的)连接电脑,"></a>首先将手机关机,并且将手机通过数据线(建议原装的)连接电脑,</h4><h4 id="然后按住手机的音量-键和音量-键不要放手"><a href="#然后按住手机的音量-键和音量-键不要放手" class="headerlink" title="然后按住手机的音量+键和音量-键不要放手,"></a>然后按住手机的音量+键和音量-键不要放手,</h4><h4 id="进入蓝色界面后-长按音量-键3秒钟左右-屏幕下方会出现两个选项。"><a href="#进入蓝色界面后-长按音量-键3秒钟左右-屏幕下方会出现两个选项。" class="headerlink" title="进入蓝色界面后,长按音量+键3秒钟左右,屏幕下方会出现两个选项。"></a>进入蓝色界面后,长按音量+键3秒钟左右,屏幕下方会出现两个选项。</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E8%A7%A3BL%E9%94%81/%E9%95%BF%E6%8C%893%E7%A7%92.png"></p><h4 id="此时直接按一下音量-键即可"><a href="#此时直接按一下音量-键即可" class="headerlink" title="此时直接按一下音量+键即可,"></a>此时直接按一下音量+键即可,</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E8%A7%A3BL%E9%94%81/%E6%8C%89%E4%B8%80%E4%B8%8B%2B%E9%94%AE.png"></p><h4 id="然后手机会黑屏重启并且出现感叹号字样-不用理会-过程可能会很长-耐心等待即可"><a href="#然后手机会黑屏重启并且出现感叹号字样-不用理会-过程可能会很长-耐心等待即可" class="headerlink" title="然后手机会黑屏重启并且出现感叹号字样,不用理会,过程可能会很长,耐心等待即可,"></a>然后手机会黑屏重启并且出现感叹号字样,不用理会,过程可能会很长,耐心等待即可,</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E8%A7%A3BL%E9%94%81/%E6%AD%A4%E7%95%8C%E9%9D%A2%E6%AD%A3%E5%B8%B8.png"></p><h4 id="然后解锁BL之后-会格式化一下系统-请解锁前做好备份工作"><a href="#然后解锁BL之后-会格式化一下系统-请解锁前做好备份工作" class="headerlink" title="然后解锁BL之后,会格式化一下系统(请解锁前做好备份工作)"></a>然后解锁BL之后,会格式化一下系统(请解锁前做好备份工作)</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E8%A7%A3BL%E9%94%81/%E8%A7%A3bl%E9%94%81%E5%90%8E%E4%BC%9A%E6%A0%BC%E5%BC%8F%E5%8C%96.png"></p><h4 id="接着完成设置向导-至此解Bl锁的工作就算完成了"><a href="#接着完成设置向导-至此解Bl锁的工作就算完成了" class="headerlink" title="接着完成设置向导,至此解Bl锁的工作就算完成了"></a>接着完成设置向导,至此解Bl锁的工作就算完成了</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E8%A7%A3BL%E9%94%81/%E5%AE%8C%E6%88%90%E8%AE%BE%E7%BD%AE%E5%90%91%E5%AF%BC%2C%E8%A7%A3%E9%94%81%E5%AE%8C%E6%88%90.png"></p><hr><blockquote><h4 id="下面就是打开OEM开关的操作了"><a href="#下面就是打开OEM开关的操作了" class="headerlink" title="下面就是打开OEM开关的操作了"></a>下面就是打开OEM开关的操作了</h4></blockquote><h5 id="接下来打开设置-找到关于手机-然后点击软件信息"><a href="#接下来打开设置-找到关于手机-然后点击软件信息" class="headerlink" title="接下来打开设置,找到关于手机,然后点击软件信息,"></a>接下来打开设置,找到关于手机,然后点击软件信息,</h5><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/%E6%89%93%E5%BC%80%E8%AE%BE%E7%BD%AE%2C%E6%89%BE%E5%88%B0%E5%85%B3%E4%BA%8E%E6%89%8B%E6%9C%BA.jpg"></p><h4 id="接着单击7次版本号-也就是编译编号-到这一步-我们打开了开发者模式的开关"><a href="#接着单击7次版本号-也就是编译编号-到这一步-我们打开了开发者模式的开关" class="headerlink" title="接着单击7次版本号(也就是编译编号),到这一步,我们打开了开发者模式的开关,"></a>接着单击7次版本号(也就是编译编号),到这一步,我们打开了开发者模式的开关,</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/%E5%8D%95%E5%87%BB%E4%B8%83%E6%AC%A1%E7%89%88%E6%9C%AC%E5%8F%B7.jpg"></p><h4 id="接着我们按一下返回键-回到设置界面-然后划到最下面会发现多出一个选项-开发者选项"><a href="#接着我们按一下返回键-回到设置界面-然后划到最下面会发现多出一个选项-开发者选项" class="headerlink" title="接着我们按一下返回键,回到设置界面,然后划到最下面会发现多出一个选项(开发者选项)"></a>接着我们按一下返回键,回到设置界面,然后划到最下面会发现多出一个选项(开发者选项)</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/%E5%BC%80%E5%8F%91%E8%80%85%E9%80%89%E9%A1%B9.jpg"></p><h4 id="进入开发者选项后-我们找到OEM开关-将其打开即可"><a href="#进入开发者选项后-我们找到OEM开关-将其打开即可" class="headerlink" title="!!!进入开发者选项后,我们找到OEM开关,将其打开即可,"></a>!!!进入开发者选项后,我们找到OEM开关,将其打开即可,</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/OEM%E5%BC%80%E5%85%B3.png"></p><h4 id="到这里我们已经完成了手机刷第三方ROM的基本条件"><a href="#到这里我们已经完成了手机刷第三方ROM的基本条件" class="headerlink" title="到这里我们已经完成了手机刷第三方ROM的基本条件"></a>到这里我们已经完成了手机刷第三方ROM的基本条件</h4><hr><blockquote><h4 id="接下来安装三星专用的USB驱动-然后将手机关机进入挖煤模式"><a href="#接下来安装三星专用的USB驱动-然后将手机关机进入挖煤模式" class="headerlink" title="接下来安装三星专用的USB驱动,然后将手机关机进入挖煤模式,"></a>接下来安装三星专用的USB驱动,然后将手机关机进入挖煤模式,</h4></blockquote><h4 id="然后可以看到-下图的两个锁的状态都为OFF-这里就可以进行下面的操作了"><a href="#然后可以看到-下图的两个锁的状态都为OFF-这里就可以进行下面的操作了" class="headerlink" title="然后可以看到,下图的两个锁的状态都为OFF,这里就可以进行下面的操作了,"></a>然后可以看到,下图的两个锁的状态都为OFF,这里就可以进行下面的操作了,</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/%E7%8A%B6%E6%80%81%E9%83%BD%E4%B8%BAOFF.jpg"></p><h4 id="电脑安装usb驱动后-连接手机-电脑上打开Odin"><a href="#电脑安装usb驱动后-连接手机-电脑上打开Odin" class="headerlink" title="电脑安装usb驱动后,连接手机,电脑上打开Odin,"></a>电脑安装usb驱动后,连接手机,电脑上打开Odin,</h4><h4 id="此时可以看到Odin的COMX下方是蓝色状态-表示手机设备正确连接"><a href="#此时可以看到Odin的COMX下方是蓝色状态-表示手机设备正确连接" class="headerlink" title="此时可以看到Odin的COMX下方是蓝色状态,表示手机设备正确连接,"></a>此时可以看到Odin的COMX下方是蓝色状态,表示手机设备正确连接,</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/Odin1.jpg"></p><h4 id="现在我们点击AP按钮选择你的手机型号对应的TWRP文件-等待加载完毕即可"><a href="#现在我们点击AP按钮选择你的手机型号对应的TWRP文件-等待加载完毕即可" class="headerlink" title="现在我们点击AP按钮选择你的手机型号对应的TWRP文件,等待加载完毕即可,"></a>现在我们点击AP按钮选择你的手机型号对应的TWRP文件,等待加载完毕即可,</h4><h4 id="点击开始刷机按钮-等待第三方TWRP被写入手机里"><a href="#点击开始刷机按钮-等待第三方TWRP被写入手机里" class="headerlink" title="点击开始刷机按钮,等待第三方TWRP被写入手机里,"></a>点击开始刷机按钮,等待第三方TWRP被写入手机里,</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/%E7%AD%89%E5%BE%85%E8%BF%9B%E5%BA%A6%E6%9D%A1.png"></p><h4 id="当我们看到刷机成功后-迅速拔掉数据线"><a href="#当我们看到刷机成功后-迅速拔掉数据线" class="headerlink" title="当我们看到刷机成功后,迅速拔掉数据线,"></a>当我们看到刷机成功后,迅速拔掉数据线,</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/%E5%88%B7%E6%9C%BA%E6%88%90%E5%8A%9F.png"></p><h4 id="接着按电源键和音量-键-bixby键进入第三方rec模式-如果看不懂英文，你可以点击settings按钮，将rec设置成中文界面。"><a href="#接着按电源键和音量-键-bixby键进入第三方rec模式-如果看不懂英文，你可以点击settings按钮，将rec设置成中文界面。" class="headerlink" title="接着按电源键和音量+键+bixby键进入第三方rec模式,如果看不懂英文，你可以点击settings按钮，将rec设置成中文界面。"></a>接着按电源键和音量+键+bixby键进入第三方rec模式,如果看不懂英文，你可以点击settings按钮，将rec设置成中文界面。</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/%E7%82%B9%E5%87%BBwipe.png"></p><h4 id="进入第三方rec模式后-因为我们是第一次刷机-所以要先格式化一下Data-这样做是要避免Data数据被加密"><a href="#进入第三方rec模式后-因为我们是第一次刷机-所以要先格式化一下Data-这样做是要避免Data数据被加密" class="headerlink" title="进入第三方rec模式后,因为我们是第一次刷机,所以要先格式化一下Data,这样做是要避免Data数据被加密,"></a>进入第三方rec模式后,因为我们是第一次刷机,所以要先格式化一下Data,这样做是要避免Data数据被加密,</h4><h4 id="我们点击wipe选项-点击format-data按钮"><a href="#我们点击wipe选项-点击format-data按钮" class="headerlink" title="我们点击wipe选项,点击format data按钮,"></a>我们点击wipe选项,点击format data按钮,</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/%E6%A0%BC%E5%BC%8F%E5%8C%96data.png"></p><h4 id="然后用键盘输入yes-输入回车-等待格式化完成"><a href="#然后用键盘输入yes-输入回车-等待格式化完成" class="headerlink" title="然后用键盘输入yes,输入回车,等待格式化完成"></a>然后用键盘输入yes,输入回车,等待格式化完成</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A0%BC%E5%BC%8F%E5%8C%96.png"></p><h4 id="完成之后-还建议在做了备份工作的情况下-执行五清指令-这样做可以避免刷机之后出现非ROM本身问题的bug"><a href="#完成之后-还建议在做了备份工作的情况下-执行五清指令-这样做可以避免刷机之后出现非ROM本身问题的bug" class="headerlink" title="完成之后,还建议在做了备份工作的情况下,执行五清指令,这样做可以避免刷机之后出现非ROM本身问题的bug,"></a>完成之后,还建议在做了备份工作的情况下,执行五清指令,这样做可以避免刷机之后出现非ROM本身问题的bug,</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/%E4%BA%94%E6%B8%85%E9%80%89%E9%A1%B9.png"></p><h4 id="勾选第一个到第五个选项-滑动底部的滑块-完成五清操作-当然我们也可以执行双清指令-这样一些数据还可以被保存-个人不推荐这样做"><a href="#勾选第一个到第五个选项-滑动底部的滑块-完成五清操作-当然我们也可以执行双清指令-这样一些数据还可以被保存-个人不推荐这样做" class="headerlink" title="勾选第一个到第五个选项,滑动底部的滑块,完成五清操作,当然我们也可以执行双清指令,这样一些数据还可以被保存,(个人不推荐这样做)"></a>勾选第一个到第五个选项,滑动底部的滑块,完成五清操作,当然我们也可以执行双清指令,这样一些数据还可以被保存,(个人不推荐这样做)</h4><h4 id="接着我们就可以返回rec的主界面-点击install按钮-选择你下载好的第三方ROM-zip格式的-进行刷机"><a href="#接着我们就可以返回rec的主界面-点击install按钮-选择你下载好的第三方ROM-zip格式的-进行刷机" class="headerlink" title="接着我们就可以返回rec的主界面,点击install按钮,选择你下载好的第三方ROM(.zip格式的)进行刷机,"></a>接着我们就可以返回rec的主界面,点击install按钮,选择你下载好的第三方ROM(.zip格式的)进行刷机,</h4><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E4%B8%89%E6%98%9F/%E5%88%B7%E7%AC%AC%E4%B8%89%E6%96%B9%E6%95%99%E7%A8%8B/%E7%AC%AC%E4%B8%89%E6%96%B9ROM.png"></p><h4 id="等待脚本执行完毕后-会提示你重启系统-接着你只需要等待5-10分钟-手机就会开机-完成设置向导-至此你的手机已经完成第三方ROM的刷机工作-即可体验外版手机没有的本体化以及更多的自定义选项"><a href="#等待脚本执行完毕后-会提示你重启系统-接着你只需要等待5-10分钟-手机就会开机-完成设置向导-至此你的手机已经完成第三方ROM的刷机工作-即可体验外版手机没有的本体化以及更多的自定义选项" class="headerlink" title="等待脚本执行完毕后,会提示你重启系统,接着你只需要等待5~10分钟,手机就会开机,完成设置向导,至此你的手机已经完成第三方ROM的刷机工作,即可体验外版手机没有的本体化以及更多的自定义选项,"></a>等待脚本执行完毕后,会提示你重启系统,接着你只需要等待5~10分钟,手机就会开机,完成设置向导,至此你的手机已经完成第三方ROM的刷机工作,即可体验外版手机没有的本体化以及更多的自定义选项,</h4><blockquote><h3 id="我是泰戈尔-如果这篇教程能够帮到你-我会感到很开心-当然你也可以在文章的最后-扫描我的个人二维码对我的工作给予你主观的肯定-即不限大小的金额捐赠-另外-如果你对这篇教程有额外的补充或者不明白的地方-欢迎在下方的评论系统中给我留言-我会在看到消息的第一时间给你答复。谢谢支持。"><a href="#我是泰戈尔-如果这篇教程能够帮到你-我会感到很开心-当然你也可以在文章的最后-扫描我的个人二维码对我的工作给予你主观的肯定-即不限大小的金额捐赠-另外-如果你对这篇教程有额外的补充或者不明白的地方-欢迎在下方的评论系统中给我留言-我会在看到消息的第一时间给你答复。谢谢支持。" class="headerlink" title="我是泰戈尔,如果这篇教程能够帮到你,我会感到很开心,当然你也可以在文章的最后,扫描我的个人二维码对我的工作给予你主观的肯定,即不限大小的金额捐赠,另外,如果你对这篇教程有额外的补充或者不明白的地方,欢迎在下方的评论系统中给我留言,我会在看到消息的第一时间给你答复。谢谢支持。"></a>我是泰戈尔,如果这篇教程能够帮到你,我会感到很开心,当然你也可以在文章的最后,扫描我的个人二维码对我的工作给予你主观的肯定,即不限大小的金额捐赠,另外,如果你对这篇教程有额外的补充或者不明白的地方,欢迎在下方的评论系统中给我留言,我会在看到消息的第一时间给你答复。谢谢支持。</h3></blockquote>]]></content>
      
      
      <categories>
          
          <category> 三星Galaxy </category>
          
          <category> 玩机 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第三方ROM </tag>
            
            <tag> 刷机教程 </tag>
            
            <tag> root </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6新增特性</title>
      <link href="/2018/09/26/es6%E6%96%B0%E5%A2%9E%E7%89%B9%E6%80%A7/"/>
      <url>/2018/09/26/es6%E6%96%B0%E5%A2%9E%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png" alt="泰戈尔"></p><h2 id="javascript的诞生"><a href="#javascript的诞生" class="headerlink" title="javascript的诞生"></a>javascript的诞生</h2><ul><li>1992年底，美国国家超级电脑应用中心（NCSA）开始开发一个独立的浏览器，叫做 Mosaic。这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览。 </li><li>1994年10月，  Netscape （网景）公司，就是在 Mosaic 的基础上，开发面向普通用户的新一代的浏览器 Netscape Navigator。 </li><li>1994年12月，Navigator 发布了1.0版，市场份额一举超过90%。 </li><li>Netscape 公司很快发现，Navigator 浏览器需要一种可以嵌入网页的脚本语言，用来控制浏览器行为。 因为当时网速特别的慢，很多表单的校验不适合放在服务器端进行校验。管理层对于这种脚本语言的设想是：<strong>功能不需要太强大，语法要简单，容易学习和使用</strong></li><li>1995年，Netscape 公司雇佣了程序员<code>Brendan Eich 布兰登·艾奇</code> 开发这种网页脚本语言。 </li><li>1995年5月，Brendan Eich 只用了10天，就设计完成了这种语言的第一版，叫做<code>LiveScript</code>。它是一个大杂烩，语法有多个来源。<ul><li>基本语法：借鉴 C 语言和 Java 语言。</li><li>数据结构：借鉴 Java 语言，包括将值分成原始值和对象两大类。</li><li>函数的用法：借鉴 Scheme 语言和 Awk 语言，将函数当作第一等公民，并引入闭包。</li><li>原型继承模型：借鉴 Self 语言（Smalltalk 的一种变种）。</li><li>正则表达式：借鉴 Perl 语言。</li><li>字符串和数组处理：借鉴 Python 语言。</li></ul></li><li>为了保持简单，这种脚本语言缺少一些关键的功能，比如块级作用域、模块、子类型（subtyping）等等，但是可以利用现有功能找出解决办法。 <strong>后果：对于其他的编程语言，你需要只需要学习该语言提供的各种语法即可。对于javascript，你需要学习解决问题的各种模式，比如原型，原型链实现继承，闭包等等</strong></li><li>1995年 12月，Netscape 公司与 Sun 公司合作，后者允许将这种语言叫做 JavaScript。把LiveScript改名成了Javascript</li><li><strong>注意：javascript实质上和java没有什么关系</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/java%E5%92%8Cjavascript%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="Javascript"></p><h2 id="ECMAScript与Javascript的关系"><a href="#ECMAScript与Javascript的关系" class="headerlink" title="ECMAScript与Javascript的关系"></a>ECMAScript与Javascript的关系</h2><p>1996年11月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给国际标准化组织ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript ，这个版本就是1.0版。</p><p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript ，有两个原因。一是商标，Java是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA ，不是 Netscape ，这样有利于保证这门语言的开放性和中立性。</p><p>ECMAScript，简称ES，是由Ecma国际（欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）按照标准制定的一种脚本语言规范。</p><p>JavaScript是按ECMAScript规范实现的一种脚本语言，JavaScript除了实现了ECMAScript规范，还提供了BOM和DOM的操作。</p><h2 id="ECMAScript版本历史"><a href="#ECMAScript版本历史" class="headerlink" title="ECMAScript版本历史"></a>ECMAScript版本历史</h2><ul><li><p>ES1.0, 1997年06月发布</p></li><li><p>ES2.0, 1998年06月发布</p></li><li><p>ES3.0, 1999年12月发布</p></li><li><p>ES4.0,  由于关于语言的复杂性出现了分歧。放弃发布</p></li><li><p>ES5.0, 2009年12月发布， 增加了严格模式，增加了少量语法，为ES6铺路</p></li><li><p>ES6.0, 2015年6月发布，增加了大量的新概念和语法特性</p><ul><li><strong>第六版的名字， 可以叫做ECMAScript6.0(ES), 也可以叫做ECMAScript 2015（ES2015）</strong></li><li>ECMA组织决定以后每年6月份都会发布一版新的语法标准，比如ES7(ECMAScript 2016) </li><li><strong>通过我们说的ES6泛指ES5之后的下一代标准，涵盖了ES6, ES7, ES8….</strong>  </li></ul></li><li><p>参考书籍： <a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a> </p></li></ul><h1 id="ES5-数组的新方法"><a href="#ES5-数组的新方法" class="headerlink" title="ES5-数组的新方法"></a>ES5-数组的新方法</h1><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p><code>forEach()</code> 方法对数组的每个元素执行一次提供的函数。功能等同于<code>for</code>循环.</p><p>应用场景：为一些相同的元素，绑定事件处理器！强调的是数组中每一项都要遍历</p><p>作用：</p><ul><li>1.只能是用来遍历 </li><li>2.一旦开始了遍历就停不下来</li><li>3.返回值是undefined  对于我们来说没有用</li></ul><p><strong>需求：遍历数组[“张飞”,”关羽”,”赵云”,”马超”]</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;张飞&quot;</span>,<span class="string">&quot;关羽&quot;</span>,<span class="string">&quot;赵云&quot;</span>,<span class="string">&quot;马超&quot;</span>];</span><br><span class="line"><span class="comment">//第一个参数：element，数组的每一项元素</span></span><br><span class="line"><span class="comment">//第二个参数：index，数组的下标</span></span><br><span class="line"><span class="comment">//第三个参数：array，正在遍历的数组</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(element, index, array);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><p><strong>需求：遍历数组，求每一项的平方存在于一个数组中</strong></p><p><strong>作用：</strong></p><ul><li>1.可以循环遍历数组中的每一项数据</li><li>2.可以对循环遍历到的每一项数据进行操作</li><li>3.<strong>==重点应用场景: 对数组中的每一项数据进行操作,比如：给每数组中的每一项添加一个相同的样式==</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];  <span class="comment">// 1 4 9 16 25</span></span><br><span class="line"><span class="comment">//第一个参数：element，数组的每一项元素</span></span><br><span class="line"><span class="comment">//第二个参数：index，数组的下标</span></span><br><span class="line"><span class="comment">//第三个参数：array，正在遍历的数组</span></span><br><span class="line"><span class="comment">//返回值：一个新数组，每个元素都是回调函数的结果。</span></span><br><span class="line"><span class="keyword">var</span> newArray = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element * element;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArray);<span class="comment">//[1,4,9,16,25]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 学了箭头函数之后的简写如下:</span></span><br><span class="line"><span class="keyword">var</span> res = nums.map(<span class="function"><span class="params">item</span> =&gt;</span> item * item )</span><br></pre></td></tr></table></figure><p>案例：获取所有的名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;rose&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;jerry&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">let</span> res = list.map(<span class="function"><span class="params">item</span> =&gt;</span> item.name)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p><code>filter</code>用于过滤掉“不合格”的元素<br>返回一个新数组，如果在回调函数中返回true，那么就留下来，如果返回false，就扔掉</p><p><strong>需求：遍历数组，将数组中工资超过5000的值找出来[1000, 5000, 20000, 3000, 10000, 800, 1500]</strong></p><p><strong>作用:</strong></p><ul><li>1.可以循环遍历数组中的每一项</li><li>2.可以对循环遍历到的数据进行判断</li><li>3.当条件成立时,使用了return true后会将满足条件的那一项存到一个新的数组当中</li><li>4.<strong>==重点应用场景:根据条件过滤数组中的数据==</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1000</span>, <span class="number">5000</span>, <span class="number">20000</span>, <span class="number">3000</span>, <span class="number">10000</span>, <span class="number">800</span>, <span class="number">1500</span>];</span><br><span class="line"><span class="comment">//第一个参数：element，数组的每一项元素</span></span><br><span class="line"><span class="comment">//第二个参数：index，数组的下标</span></span><br><span class="line"><span class="comment">//第三个参数：array，正在遍历的数组</span></span><br><span class="line"><span class="comment">//返回值：一个新数组，存储了所有返回true的元素</span></span><br><span class="line"><span class="keyword">var</span> newArray = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(element &gt; <span class="number">5000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArray);<span class="comment">//[1000, 5000, 3000, 800, 1500]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 学了箭头函数之后的简写如下:</span></span><br><span class="line"><span class="keyword">var</span> res = nums.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">5000</span>)</span><br></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p><code>some</code>用于遍历数组，如果有至少一个满足条件，就返回true，否则返回false。</p><p>**需求：遍历数组，查找数组中的某条数据 比如：查找[10, 20, 30, 40, 50, 60] 中的30</p><p>作用:</p><ul><li>1.可以用来循环遍历数组中的每一项</li><li>2.在回调函数中进行条件判断，如果return true执行之后，会阻止后续代码的遍历执行</li><li>3.重点应用场景: <strong>==条件成立时不再执行后续的循环==</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找数组有没有30 如果有，就不要再向下遍历了</span></span><br><span class="line">   <span class="keyword">let</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line"></span><br><span class="line">   nums.some(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// console.log(item,index,arr);</span></span><br><span class="line">     <span class="keyword">if</span> (item == <span class="number">30</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">console</span>.log(item);</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p><code>every</code>用于遍历数组，只有当所有的元素返回true，才返回true，否则返回false。</p><p><strong>需求：遍历数组，判断==整体==是否都满足条件</strong></p><p>作用：</p><ul><li>1.可以对数组中的每一项进行遍历，但是只打印第一项</li><li>2.对数组中的每一项进行判断，都满足条件则返回true,如果有一项不满足条件则返回false</li><li>3.==应用场景：重点是强调整体的一个处理结果，比如，某班考试成绩是否都合格==</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// every 比如说: 考试完成之后,判断一下成绩当中是否有不及格的 如果都满足条件则返回true,有一个不满足条件则返回false</span></span><br><span class="line">    <span class="comment">// var score = [100,99,96,93,65,74,41,25,62,18];</span></span><br><span class="line">    <span class="keyword">var</span> score = [<span class="number">100</span>,<span class="number">99</span>,<span class="number">62</span>,<span class="number">25</span>,<span class="number">88</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> flag =  score.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// console.log(item,index,arr);</span></span><br><span class="line">      <span class="keyword">return</span> item &gt; <span class="number">60</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(flag);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学了箭头函数之后的简写如下:</span></span><br><span class="line"><span class="keyword">var</span> res = nums.every(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">60</span>)</span><br></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><blockquote><p><code>**reduce()**</code> 方法对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数，将其结果汇总为单个返回值 </p></blockquote><p>语法：<code>reduce(callback, initValue)</code></p><p>callback: 每个元素都会执行一次的回调函数</p><p>initValue: 初始值</p><p>callback的4个参数</p><ul><li>prev： 上一次的值，第一次为初始值</li><li>item:  当前值</li><li>index: 下标</li><li>arr: 数组</li></ul><p>案例：计算数组所有值的和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line"><span class="keyword">var</span> res = nums.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, item</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// console.log(prev, item);</span></span><br><span class="line">      <span class="keyword">return</span> prev + item</span><br><span class="line"> &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学了箭头函数之后的简写如下:</span></span><br><span class="line"><span class="keyword">var</span> res = nums.reduce(<span class="function">(<span class="params">prev,item</span>)=&gt;</span>prev + item)</span><br></pre></td></tr></table></figure><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>ES6中提供了两个声明变量的关键字：const和let </p></blockquote><h3 id="let的使用"><a href="#let的使用" class="headerlink" title="let的使用"></a>let的使用</h3><p>ES6 新增了<code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>。</p><ul><li>let声明的变量只有在当前作用域有效</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>不存在变量提升</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>不允许重复声明</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;<span class="comment">//报错 Identifier &#x27;a&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><h3 id="const的使用"><a href="#const的使用" class="headerlink" title="const的使用"></a>const的使用</h3><p><code>const</code>声明一个只读的常量。常量：值不可以改变的量 </p><ul><li>const声明的量不可以改变</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">PI = <span class="number">3</span>; <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><ul><li>const声明的变量必须赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num;</span><br></pre></td></tr></table></figure><ul><li>如果const声明了一个对象，仅仅保证地址不变</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>&#125;;</span><br><span class="line">obj.age = <span class="number">18</span>;<span class="comment">//正确</span></span><br><span class="line">obj = &#123;&#125;;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><ul><li>其他用法和let一样</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 只能在当前代码块中使用</span><br><span class="line"><span class="number">2.</span> 不会提升</span><br><span class="line"><span class="number">3.</span> 不能重复</span><br></pre></td></tr></table></figure><h3 id="let与const的使用场景"><a href="#let与const的使用场景" class="headerlink" title="let与const的使用场景"></a>let与const的使用场景</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 如果声明的变量不需要改变，那么使用<span class="keyword">const</span></span><br><span class="line"><span class="number">2.</span> 如果声明的变量需要改变，那么用<span class="keyword">let</span></span><br><span class="line"><span class="number">3.</span> 学了<span class="keyword">const</span>和<span class="keyword">let</span>之后，尽量别用<span class="keyword">var</span></span><br></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>以前，为变量赋值，只能直接指定值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>ES6 允许写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>解构默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">0</span>, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>解构不仅可以用于数组，还可以用于对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">foo <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">bar <span class="comment">// &quot;bbb&quot;</span></span><br></pre></td></tr></table></figure><p>如果变量名与属性名不一致，必须写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">first</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;world&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">first</span>: f, <span class="attr">last</span>: l &#125; = obj;</span><br><span class="line">f <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line">l <span class="comment">// &#x27;world&#x27;</span></span><br></pre></td></tr></table></figure><p>函数的参数也可以使用解构赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h3><p>传统的 JavaScript 语言，输出模板通常是这样写的（下面使用了 jQuery 的方法）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#result&#x27;</span>).append(</span><br><span class="line">  <span class="string">&#x27;There are &lt;b&gt;&#x27;</span> + basket.count + <span class="string">&#x27;&lt;/b&gt; &#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;items in your basket, &#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&lt;em&gt;&#x27;</span> + basket.onSale +</span><br><span class="line">  <span class="string">&#x27;&lt;/em&gt; are on sale!&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面这种写法相当繁琐不方便，ES6 引入了模板字符串解决这个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#result&#x27;</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">  There are &lt;b&gt;<span class="subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span></span><br><span class="line"><span class="string">   in your basket, &lt;em&gt;<span class="subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></span><br><span class="line"><span class="string">  are on sale!</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure><p>字符串模版的优点</p><ul><li>允许换行</li><li>可以使用插值  <code>$&#123;&#125;</code></li></ul><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><ul><li>**includes()**：返回布尔值，表示是否找到了参数字符串。</li><li>**startsWith()**：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li>**endsWith()**：返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><strong>find是ES6新增的语法</strong></p><p><code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一个大于10的数</span></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> found = array1.find(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(found);</span><br></pre></td></tr></table></figure><h3 id="findexIndex"><a href="#findexIndex" class="headerlink" title="findexIndex"></a>findexIndex</h3><p><strong>findIndex是ES6新增的语法</strong></p><p><code>findIndex()</code>方法返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。否则返回-1。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一个大于10的下标</span></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findFirstLargeNumber</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1.findIndex(findFirstLargeNumber));</span><br></pre></td></tr></table></figure><h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><h2 id="函数-箭头函数"><a href="#函数-箭头函数" class="headerlink" title="函数-箭头函数"></a>函数-箭头函数</h2><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。</p><p>为什么叫Arrow Function？因为它的定义用的就是一个箭头：</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">相当于</span><br><span class="line"><span class="comment">//语法： (参数列表) =&gt; &#123;函数体&#125;</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><ul><li>如果没有参数列表，使用()表示参数列表</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 等同于：</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果只有一个参数，可以省略()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等同于：</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">n1</span>) </span>&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="params">n1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果有多个参数，需要使用()把参数列表括起来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">n1, n2</span>) </span>&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">n1, n2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="返回值详解"><a href="#返回值详解" class="headerlink" title="返回值详解"></a>返回值详解</h3><ul><li>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">n1</span>) </span>&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="params">n1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果函数体只有一行一句，那么可以省略{}和return</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function">(<span class="params">n1, n2</span>) =&gt;</span> n1 + n2;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 箭头函数 </tag>
            
            <tag> es6新特性 </tag>
            
            <tag> 操作数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅拷贝深拷贝的详解</title>
      <link href="/2018/08/24/%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/08/24/%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><h3 id="hello-我是泰戈尔-今天给大家讲讲深拷贝及浅拷贝的原理"><a href="#hello-我是泰戈尔-今天给大家讲讲深拷贝及浅拷贝的原理" class="headerlink" title="hello,我是泰戈尔,今天给大家讲讲深拷贝及浅拷贝的原理"></a>hello,我是泰戈尔,今天给大家讲讲深拷贝及浅拷贝的原理</h3></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png"></p><hr><h2 id="如果要理解前端的深拷贝和浅拷贝-首先要了解什么是简单数据类型和引用-复杂-数据类型"><a href="#如果要理解前端的深拷贝和浅拷贝-首先要了解什么是简单数据类型和引用-复杂-数据类型" class="headerlink" title="如果要理解前端的深拷贝和浅拷贝,首先要了解什么是简单数据类型和引用(复杂)数据类型,"></a>如果要理解前端的深拷贝和浅拷贝,首先要了解什么是简单数据类型和引用(复杂)数据类型,</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">简单数据类型:</span><br><span class="line">1. Number(数字)</span><br><span class="line">2. String(字符串)</span><br><span class="line">3. Boolean(布尔)</span><br><span class="line">4. undefined(声明未定义)</span><br><span class="line">5. null(未赋值)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">复杂数据类型:</span><br><span class="line">1. Object</span><br><span class="line">2. Array</span><br><span class="line">3. Function</span><br><span class="line">4. Math</span><br><span class="line">5. Date等等....</span><br></pre></td></tr></table></figure><blockquote><p>演示什么是简单数据类型</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A3%E7%A0%81.webp"></p><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%89%93%E5%8D%B0.webp"></p><blockquote><p>图片解释其底层原理</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E5%9B%BE%E7%89%87%E8%A7%A3%E9%87%8A%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8E%9F%E7%90%86.webp"></p><blockquote><p>演示什么是复杂数据类型</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A3%E7%A0%81.webp"></p><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%89%93%E5%8D%B0"></p><blockquote><p>图片解释其底层原理</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8E%9F%E7%90%86.webp"></p><h3 id="首先什么是拷贝"><a href="#首先什么是拷贝" class="headerlink" title="首先什么是拷贝,"></a>首先什么是拷贝,</h3><blockquote><p>拷贝就是将一个对象<code>obj1</code>复制给另一个对象<code>obj2</code>,且当<code>obj2</code>的数据发生改变时,<code>obj1</code>不会被改变</p></blockquote><h2 id="什么是浅拷贝"><a href="#什么是浅拷贝" class="headerlink" title="什么是浅拷贝:"></a>什么是浅拷贝:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#浅拷贝就是只拷贝对象的一层属性,如果对象里面还有对象,拷贝的是内存地址,并且此时修改数据会对原对象有影响,浅拷贝适用于对象属性里面的值是简单数据类型的</span><br></pre></td></tr></table></figure><h2 id="用代码演示并实现浅拷贝"><a href="#用代码演示并实现浅拷贝" class="headerlink" title="用代码演示并实现浅拷贝:"></a>用代码演示并实现浅拷贝:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 利用for in方法遍历原对象,声明一个新对象,然后使新对象的对应索引的值等于原对象对应索引的值,最后返回这个新对象,</span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">        class: &#39;UI&#39;,</span><br><span class="line">        age: 20,</span><br><span class="line">        love: &#39;eat&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    function getObj(obj) &#123;</span><br><span class="line">        var newObj &#x3D; &#123;&#125;</span><br><span class="line">        for (var k in obj) &#123; </span><br><span class="line">          newObj[k] &#x3D; obj[k]</span><br><span class="line">        &#125;</span><br><span class="line">        return newObj</span><br><span class="line">      &#125;</span><br><span class="line">    var obj2 &#x3D; getObj(obj)</span><br><span class="line"># 只拷贝一层属性的时候,修改数据不会影响原对象内部的数据,</span><br><span class="line"># 如果拷贝的是对象内部的对象的时候,此时修改其数据,会改变原对象的内部的对象的数据,</span><br></pre></td></tr></table></figure><h2 id="什么是深拷贝"><a href="#什么是深拷贝" class="headerlink" title="什么是深拷贝:"></a>什么是深拷贝:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#   深拷贝就是拷贝对象的多层属性,如果对象里面还有对象,会继续拷贝,此时修改其数据不会改变原对象内部的数据,主要使用递归函数去实现.</span><br></pre></td></tr></table></figure><h2 id="用代码演示并实现深拷贝"><a href="#用代码演示并实现深拷贝" class="headerlink" title="用代码演示并实现深拷贝:"></a>用代码演示并实现深拷贝:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#创建一个新对象,利用for in方法,遍历原对象,使原对象对应索引的值等于新创建的对象索引的值,使用 typeof 方法判断对象内部是否全部为简单的数据类型,如果是则直接返回这个对象,如果对象内部还有对象(就是返回值是object的话,则继续遍历,直到对象内部没有对象为止,)</span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">        class: &#39;前端&#39;,</span><br><span class="line">        age: 26,</span><br><span class="line">        love: &#123;</span><br><span class="line">          friuts : &#39;apple&#39;,</span><br><span class="line">          meat: &#39;beef&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">function getObj(obj) &#123;</span><br><span class="line">      var newObj &#x3D; &#123;&#125;</span><br><span class="line">      for (var k in obj) &#123; </span><br><span class="line">        newObj[k] &#x3D; typeof obj[k] &#x3D;&#x3D; &#39;object&#39; ? getObj(obj[k]) : obj[k]</span><br><span class="line">      &#125;</span><br><span class="line">      return newObj</span><br><span class="line">    &#125;</span><br><span class="line">    var obj2 &#x3D; getObj(obj)</span><br><span class="line">#    最后可以使用三元表达式对代码进行精简优化</span><br></pre></td></tr></table></figure><blockquote><h2 id="好了到此就讲完了深拷贝和浅拷贝的原理-前端深似海-学习不止步-加油"><a href="#好了到此就讲完了深拷贝和浅拷贝的原理-前端深似海-学习不止步-加油" class="headerlink" title="好了到此就讲完了深拷贝和浅拷贝的原理,前端深似海,学习不止步,加油!"></a>好了到此就讲完了深拷贝和浅拷贝的原理,前端深似海,学习不止步,加油!</h2></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 浅拷贝深拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用方法</title>
      <link href="/2018/08/16/git%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2018/08/16/git%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png"></p><h1 id="git-基础入门"><a href="#git-基础入门" class="headerlink" title="git 基础入门"></a>git 基础入门</h1><blockquote><p>Git 是一款免费、开源的<strong>分布式</strong> <strong>版本控制系统</strong> ，用于敏捷高效地处理任何或小或大的项目。</p></blockquote><h2 id="git-的安装"><a href="#git-的安装" class="headerlink" title="git 的安装"></a>git 的安装</h2><p><a href="https://git-scm.com/download/win">下载地址</a></p><p>注意：</p><ol><li>不要安装在中文目录</li><li>不要使用桌面管理软件</li></ol><p>安装很简单，一直下一步即可。在任意的目录下右键，能看到菜单, 就表示安装成功了。</p><p>github 账号注册</p><p><a href="https://github.com/">github 官网</a></p><h2 id="git-三个区"><a href="#git-三个区" class="headerlink" title="git 三个区"></a>git 三个区</h2><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/git01.png" alt="通过图片了解"></p><p>要对某个项目使用 git 进行管理，需要使用<code>git init</code>命令初始化 git 仓库<br><code>git init</code>会在当前目录生成一个隐藏文件夹 .git 不要去修改这个文件夹下的任意东西。</p><p>git 仓库会分成三个区</p><p>工作区：我们书写代码的地方，工作的目录就叫工作区。</p><p>暂存区：暂时存储的区域，在 git 中，代码无法直接从工作区提交到仓库区，而是需要先从工作区添加到暂存区，然后才能从暂存区提交到仓库区。暂存区的目的是避免误操作。</p><p>仓库区：将保存在暂存区域的内容永久转储到 Git 仓库中，生成版本号。生成版本号之后，就可以任何的回退到某一个具体的版本。</p><h2 id="git-基本命令"><a href="#git-基本命令" class="headerlink" title="git 基本命令"></a>git 基本命令</h2><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><ul><li>作用：初始化 git 仓库，想要使用 git 对某个项目进行管理，需要<code>git init</code>进行初始化</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化仓库， 在当前目录下生成一个隐藏文件夹.git</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><ul><li>作用：将文件由 <code>工作区</code> 添加到 <code>暂存区</code>，在 git 中，文件无法直接从工作区直接添加到仓库区，必须先从工作区添加到暂存区，再从暂存区添加到仓库区。</li><li>命令：<code>git add 文件名/目录名</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将index.html添加到暂存区</span></span><br><span class="line">git add index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将css目录下所有的文件添加到暂存区</span></span><br><span class="line">git add css</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录下所有的文件</span></span><br><span class="line">git add .</span><br><span class="line">git add --all</span><br></pre></td></tr></table></figure><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>作用：将文件由 暂存区 添加到 仓库区，生成版本号（存档）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文件从暂存区提交到仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;提交说明&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不写提交说明，会进入vi编辑器，没有写提交说明，是提交不成功的。 :q!来退出</span></span><br><span class="line">git commit   <span class="comment"># 需要使用vi输入内容  vi编辑器常用操作</span></span><br></pre></td></tr></table></figure><h3 id="git-config-配置"><a href="#git-config-配置" class="headerlink" title="git config 配置"></a>git config 配置</h3><p>如果是第一次提交，需要配置提交者信息，推荐和 github 的账号邮箱一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git config  user.name 你的目标用户名</span></span><br><span class="line"><span class="comment"># git config  user.email 你的目标邮箱名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用--global参数，配置全局的用户名和邮箱，只需要配置一次即可。推荐配置github的用户名和密码</span></span><br><span class="line">git config  --global user.name  皮皮虾</span><br><span class="line">git config  --global user.email 2641543334@qq.com</span><br></pre></td></tr></table></figure><p>如果是之前已经配置了，想清空的话，可以使用如下命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">global</span> user.name <span class="string">&#x27;&#x27;</span></span><br><span class="line">git config --<span class="built_in">global</span> user.email <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><ul><li><p>作用：查看文件的状态</p></li><li><p>命令：<code>git status</code></p><ul><li>红色表示工作区中的文件需要提交</li><li>绿色表示暂存区中的文件需要提交</li></ul></li></ul><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><ul><li>作用：查看提交日志</li><li><code>git log</code> 查看提交的日志</li><li><code>git log --oneline</code> 简洁的日志信息</li></ul><h2 id="git-重置"><a href="#git-重置" class="headerlink" title="git 重置"></a>git 重置</h2><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><ul><li><p>作用：版本回退，将代码恢复到已经提交的某一个版本中。</p></li><li><p><code>git reset --hard 版本号</code> 将代码回退到某个指定的版本(版本号只要有前几位即可)</p></li><li><p>当使用了<code>git reset</code>命令后，版本会回退，使用<code>git log</code>只能看到当前版本之前的信息。使用<code>git reflog</code>可以查看所有的版本信息</p></li></ul><h2 id="git-忽视文件"><a href="#git-忽视文件" class="headerlink" title="git 忽视文件"></a>git 忽视文件</h2><blockquote><p>在仓库中，有些文件是不想被 git 管理的，比如数据的配置密码、写代码的一些思路，node_modules 等。git 可以通过配置从而达到忽视掉一些文件，这样这些文件就可以不用提交了。</p></blockquote><ul><li>在仓库的根目录创建一个<code>.gitignore</code>的文件，文件名是固定的。</li><li>将不需要被 git 管理的文件路径添加到<code>.gitignore</code>中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽视idea.txt文件</span></span><br><span class="line">idea.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽视css下的index.js文件</span></span><br><span class="line">css/index.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽视css下的所有的js文件</span></span><br><span class="line">css/*.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽视css文件夹</span></span><br><span class="line">css</span><br></pre></td></tr></table></figure><h1 id="git-分支操作"><a href="#git-分支操作" class="headerlink" title="git 分支操作"></a>git 分支操作</h1><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习 Git 的时候，另一个你正在另一个平行宇宙里努力学习 SVN。</p><p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了 Git 又学会了 SVN！</p><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/fenzhi.png" alt="疯子"></p><h2 id="为什么要有分支？"><a href="#为什么要有分支？" class="headerlink" title="为什么要有分支？"></a>为什么要有分支？</h2><ul><li>如果你要开发一个新的功能，需要 2 周时间，第一周你只能写 50%代码，如果此时立即提交，代码没写完，不完整的代码会影响到别人无法工作。如果等代码写完再提交，代码很容易丢失，风险很大。</li><li>有了分支，你就可以创建一个属于自己的分支，别人看不到，也不影响别人，你在自己的分支上工作，提交到自己的分支上，等到功能开发完毕，一次性的合并到原来的分支。这样既安全，又不影响他人工作。</li></ul><h2 id="git-分支命令"><a href="#git-分支命令" class="headerlink" title="git 分支命令"></a>git 分支命令</h2><blockquote><p>在 git 中，分支实质上仅仅是一个指针，每次代码提交后，这个分支指针就会向后移动，保证一直指向最后一次提交的的版本。git 中使用 HEAD 指向当前分支</p></blockquote><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul><li><code>git branch 分支名称</code>创建分支，分支中的代码，在创建时与当前分支的内容完全相同。</li><li>git 在第一次提交时，就有了一个叫<code>master</code>的主分支。</li><li><code>git branch dev</code>，创建了一个叫做 dev 的分支</li></ul><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><ul><li><code>git branch</code>可以查看所有的分支</li><li>在当前分支的前面会有一个<code>*</code></li><li>在 git 中，有一个特殊指针<code>HEAD</code>,永远会指向当前分支</li></ul><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><ul><li><code>git checkout 分支名称</code>切换分支 HEAD 指针指向了另一个分支</li><li>在当前分支的任何操作，都不会影响到其他的分支，除非进行了分支合并。</li><li>提交代码时，会生产版本号，当前分支会指向最新的版本号。</li></ul><h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><ul><li><code>git checkout -b 分支名称</code> 创建并切换分支</li><li>切换分支会做两件事情<ul><li>创建一个新分支</li><li>把 head 指针指向当前的分支</li></ul></li></ul><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ul><li><code>git branch -d 分支名称</code> 可以删除分支</li><li>注意：不能在当前分支删除当前分支，需要切换到其他分支才能删除。</li><li>注意：<code>master</code>分支是可以删除的，但是不推荐那么做。</li></ul><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ul><li><code>git merge 分支名称</code> 将其他分支的内容合并到当前分支。</li><li>在<code>master</code>分支中执行<code>git merge dev</code> 将<code>dev</code>分支中的代码合并到<code>master</code>分支</li><li><a href="https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6">分支合并</a></li></ul><h2 id="git-合并冲突"><a href="#git-合并冲突" class="headerlink" title="git 合并冲突"></a>git 合并冲突</h2><ul><li>对于同一个文件，如果有多个分支需要合并时，容易出现冲突。</li><li>合并分支时，如果出现冲突，只能手动处理，再次提交，一般的作法，把自己的代码放到冲突代码的后面即可。</li></ul><h1 id="git-远程仓库"><a href="#git-远程仓库" class="headerlink" title="git 远程仓库"></a>git 远程仓库</h1><h2 id="github-与-git"><a href="#github-与-git" class="headerlink" title="github 与 git"></a>github 与 git</h2><p>git 与 github 没有直接的关系。</p><ul><li>git 是一个版本控制工具。</li><li>github 是一个代码托管平台，开源社区，是 git 的一个远程代码仓库。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</span></span><br><span class="line"><span class="comment">//2. github免费，代码所有人都能看到，但是只有你自己能修改。付费的可以隐藏。</span></span><br><span class="line"><span class="comment">//3. 创建git项目时，不能有中文。</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/">github 官网</a></p><p><a href="https://git.oschina.net/">开源中国-git</a></p><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><ul><li>作用：克隆远程仓库的代码到本地</li><li>git clone [远程仓库地址]</li><li><code>git clone git://github.com/itcastAAA666/test.git</code>会在本地新建一个<code>test</code>文件夹，在 test 中包含了一个<code>.git</code>目录，用于保存所有的版本记录，同时 test 文件中还有最新的代码，你可以直接进行后续的开发和使用。</li><li>git 克隆默认会使用远程仓库的项目名字，也可以自己指定。需要是使用以下命令：<code>git clone [远程仓库地址] [本地项目名]</code></li></ul><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><ul><li>作用：将本地仓库中代码提交到远程仓库</li><li><code>git push 仓库地址 master</code> 在代码提交到远程仓库，注意 master 分支必须写，不能省略</li><li>例子：<code>git push git@github.com:itcastAAA666/test.git master</code> 如果第一次使用，需要填写 github 的用户名和密码</li></ul><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><ul><li><p>作用：将远程的代码下载到本地</p></li><li><p>通常在 push 前，需要先 pull 一次。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取远程仓库的更新，并且与本地的分支进行合并</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="SSH-免密码登陆"><a href="#SSH-免密码登陆" class="headerlink" title="SSH 免密码登陆"></a>SSH 免密码登陆</h2><p>git 支持多种数据传输协议：</p><ul><li>https 协议：<code>https://github.com/你的注册名/test.git</code> 需要输入用户名和密码</li><li>ssh 协议：<code>git@github.com:你的注册名/test.git</code> 可以配置免密码登录</li></ul><p>每次 push 或者 pull 代码，如果使用 https 协议，那么都需要输入用户名和密码进行身份的确认，非常麻烦。</p><ul><li>github 为了账户的安全，需要对每一次 push 请求都要验证用户的身份，只有合法的用户才可以 push</li><li>使用 ssh 协议，配置 ssh 免密码，可以做到免密码往 github 推送代码</li></ul><h2 id="SSH-免密码登录配置"><a href="#SSH-免密码登录配置" class="headerlink" title="SSH 免密码登录配置"></a>SSH 免密码登录配置</h2><p>注意：这些命令需要在 bash 中敲</p><ul><li>1 创建 SSH Key：<code>ssh-keygen -t rsa</code><ul><li>key 钥匙的意思</li><li>gen– generate 生成，产生的意思</li></ul></li><li>2 在文件路径  <code>C:\用户\当前用户名\</code>  找到  <code>.ssh</code>  文件夹</li><li>3 文件夹中有两个文件：<ul><li>私钥：<code>id_rsa</code></li><li>公钥：<code>id_rsa.pub</code> 将公钥添加到 github 当中</li></ul></li><li>4 在  <code>github -&gt; settings -&gt; SSH and GPG keys</code>页面中，新创建 SSH key</li><li>5 粘贴 公钥  <code>id_rsa.pub</code>  内容到对应文本框中</li><li>5 在 github 中新建仓库或者使用现在仓库，拿到<code>git@github.com:用户名/仓库名.git</code></li><li>6 此后，再次 SSH 方式与 github“通信”，不用输入密码确认身份了</li></ul><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>每次 push 操作都需要带上远程仓库的地址，非常的麻烦，我们可以给仓库地址设置一个别名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给远程仓库设置一个别名</span></span><br><span class="line">git remote add 仓库别名 仓库地址</span><br><span class="line">git remote add PPXCode git@github.com:你的注册名/test.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除PPXCode这个别名</span></span><br><span class="line">git remote remove PPXCode</span><br><span class="line"></span><br><span class="line"><span class="comment"># git clone的仓库默认有一个origin的别名</span></span><br></pre></td></tr></table></figure><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a><strong>经验总结</strong></h2><ul><li>一般我们在实际开发中会经常遇到在主分支merge完之后,忘记切换回自己的分支,然后继续在master分支写代码,当我们需要pull的时候,此时git bash会出现错误，提示本地代码已经更改,要先提交才可以继续pull。</li><li>所以一般本地修改的代码和远程仓库的分支代码有冲突的时候,我们需要先commit—–&gt;pull—–&gt;push。</li><li>当本地修改的代码和远程仓库的代码没有冲突的时候,我们可以直接正常执行pull—–&gt;commit—–push。</li><li>多人开发的时候,在提交代码的时候,一定要先执行git pull!</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础知识点总结</title>
      <link href="/2018/03/26/JavaScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2018/03/26/JavaScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png"></p><h3 id="前端-Js-基础知识点总结"><a href="#前端-Js-基础知识点总结" class="headerlink" title="前端 Js 基础知识点总结"></a>前端 Js 基础知识点总结</h3><h5 id="1-什么是-JavaScript"><a href="#1-什么是-JavaScript" class="headerlink" title="1.什么是 JavaScript"></a>1.什么是 JavaScript</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正在码字中......</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5新增特性</title>
      <link href="/2017/08/19/html5%E6%96%B0%E5%A2%9E%E7%89%B9%E6%80%A7/"/>
      <url>/2017/08/19/html5%E6%96%B0%E5%A2%9E%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="hello-各位大佬-我是泰戈尔-今天给h5新增的特性做一些总结"><a href="#hello-各位大佬-我是泰戈尔-今天给h5新增的特性做一些总结" class="headerlink" title="hello,各位大佬,我是泰戈尔,今天给h5新增的特性做一些总结"></a><strong>hello,各位大佬,我是泰戈尔,今天给h5新增的特性做一些总结</strong></h2><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png"></p><h4 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签:"></a>语义化标签:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">header: 定义了文档的头部区域</span><br><span class="line"></span><br><span class="line">footer:定义了文档的页脚区域</span><br><span class="line"></span><br><span class="line">section: 定义文档中的区段</span><br><span class="line"></span><br><span class="line">nav: 定义文档的导航</span><br><span class="line"></span><br><span class="line">aside: 定义页面的侧边栏内容</span><br><span class="line"></span><br><span class="line">article: 定义页面独立的内容区域</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="增强型表单-多个type类型"><a href="#增强型表单-多个type类型" class="headerlink" title="增强型表单:(多个type类型)"></a>增强型表单:(多个type类型)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">主要是input框的多个type属性</span><br><span class="line"></span><br><span class="line">email: 包含电子邮件地址的输入框</span><br><span class="line"></span><br><span class="line">url: 链接的输入框</span><br><span class="line"></span><br><span class="line">date: 从一个日期选择器选择一个日期</span><br><span class="line"></span><br><span class="line">time: 选择一个时间</span><br><span class="line"></span><br><span class="line">datetime: 选择一个日期（UTC 时间）</span><br><span class="line"></span><br><span class="line">datetime-local: 年月日 本地时间</span><br><span class="line"></span><br><span class="line">month: 选择一个月份</span><br><span class="line"></span><br><span class="line">week: 选择周和年</span><br><span class="line"></span><br><span class="line">number: 数值的输入框</span><br><span class="line"></span><br><span class="line">range: 一定范围内数字值的输入域</span><br><span class="line"></span><br><span class="line">tel: 电话输入框</span><br><span class="line"></span><br><span class="line">search: 搜索框</span><br><span class="line"></span><br><span class="line">color: 主要用于选取颜色</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="新增的表单元素"><a href="#新增的表单元素" class="headerlink" title="新增的表单元素"></a>新增的表单元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">datalist: 定义选项列表,就是一个input框预先定义的选项列表,其中包含多个选项(值)供用户选择.</span><br><span class="line"></span><br><span class="line">keygen: 定义表单的的密钥对 生成器字段,当表单提交时,私钥储存在本地,公钥发送到服务器,服务器通常将收到的数据进行加密处理,返回给浏览器端.</span><br><span class="line"></span><br><span class="line">output: 定义了不同类型的输出的结果,比如执行js代码,(计算或者执行一些操作的结果)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="新增的表单属性"><a href="#新增的表单属性" class="headerlink" title="新增的表单属性"></a>新增的表单属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">placehoder: 在输入框内预先定义要提示用户的信息,用户在键入内容时消失</span><br><span class="line"></span><br><span class="line">required: 是一个布尔类型的属性,要求该输入框必须键入内容</span><br><span class="line"></span><br><span class="line">pattern: 利用正则表达式验证input元素的值</span><br><span class="line"></span><br><span class="line">min和max: 设置最小值和最大值</span><br><span class="line"></span><br><span class="line">step: 规定输入框的数字间隔</span><br><span class="line"></span><br><span class="line">height和width: 用于image类型的input标签的图像高度和宽度</span><br><span class="line"></span><br><span class="line">autofocus: 是一个布尔属性,规定了在页面加载完成时,是否自动获取输入框的焦点(定义光标是否定在输入框内)</span><br><span class="line"></span><br><span class="line">multiple: 是一个布尔属性,规定input框中可以选择多个值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="音视频标签等"><a href="#音视频标签等" class="headerlink" title="音视频标签等"></a>音视频标签等</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">video: 视频标签,在页面中插入一段视频</span><br><span class="line"></span><br><span class="line">audio: 音频标签,在页面中插入一段音频</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="画布Canvas"><a href="#画布Canvas" class="headerlink" title="画布Canvas"></a>画布Canvas</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">中文意思是画布,此标签用于图形的渲染,通过js来完成,此标签只是一个存放图形的容器,必须使用js来书写.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Geolocation API</span><br><span class="line">允许调用设备的位置的api来定位获取当前位置</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="拖拽释放"><a href="#拖拽释放" class="headerlink" title="拖拽释放"></a>拖拽释放</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户可以利用鼠标等选择可拖动的元素,进行拖拽,释放到指定位置等操作,</span><br><span class="line">(Drap and Drap) API ondrop</span><br></pre></td></tr></table></figure><h4 id="本地储存"><a href="#本地储存" class="headerlink" title="本地储存"></a>本地储存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cookie: 将数据始终在同源的http请求中携带（即使不需要）。即cookie在浏览器和服务器间来回传递,</span><br><span class="line"></span><br><span class="line">localStorage: 仅在本地储存,不会主动向服务器发送数据,数据长期有效,浏览器关闭,数据不会丢失</span><br><span class="line"></span><br><span class="line">sessionStorage: 仅在本地储存,不会主动向服务器发送数据,浏览器关闭数据丢失,</span><br><span class="line"></span><br><span class="line">PS:(这三者是有区别的,具体会在浏览器的缓存文章中详解)</span><br></pre></td></tr></table></figure><h4 id="新增事件"><a href="#新增事件" class="headerlink" title="新增事件"></a>新增事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">onresize: 当调整窗口大小时触发事件</span><br><span class="line"></span><br><span class="line">ondrag:当拖动元素时触发事件</span><br><span class="line"></span><br><span class="line">onscroll: 当滚动元素滚动元素的滚动条时触发事件</span><br><span class="line"></span><br><span class="line">onmousewheel: 当转动鼠标滚轮时触发事件</span><br><span class="line"></span><br><span class="line">onerror: 当错误发生时触发事件</span><br><span class="line"></span><br><span class="line">onplay: 当媒介数据将要开始播放时触发事件</span><br><span class="line"></span><br><span class="line">onpause: 当媒介数据暂停时触发事件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">新的通信协议:</span><br><span class="line"></span><br><span class="line">WebSocket是HTML5提供的一种在单个TCP连接上进行全双工通讯的协议，WebSocket使得客户端和服务器之间数据交换变得更加简单，允许服务器主动向客户端推送数据，在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 语法:data-属性名</span><br><span class="line"></span><br><span class="line">规则：1）通过data-开头；2）data-后必须至少有一个字符，多个单词之间用“-”；</span><br><span class="line"></span><br><span class="line">建议：1）尽量使用小写字母命名；2）不要有任何特殊字符；3）名称不要纯数字。</span><br><span class="line"></span><br><span class="line">2，如何来取值</span><br><span class="line"></span><br><span class="line">使用dataset[data-后面的单词（但data-后面的单词必须使用骆驼命名法，否则可能获取不到值）]。</span><br><span class="line"></span><br><span class="line">例如：&lt;p data-blog-name&#x3D;&quot;itcast&quot;&gt;泰戈尔&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">获取值：p.dataset[&quot;blogname&quot;];</span><br><span class="line">      </span><br><span class="line">2.1 或者使用getAttribute&#x2F;setAttribute来取值,</span><br><span class="line"></span><br><span class="line"> 通过名字就可以bai分析出：get 就是得到,set就是设置.</span><br><span class="line">Attribute就是属性du的zhi意思！</span><br><span class="line">所以你要的答案就是：getAttribute获得dao属性！</span><br><span class="line">setAttribute就是设置属性！</span><br><span class="line">举个例子：</span><br><span class="line">对于session对象来说,我先设置其属性：</span><br><span class="line">session.setAttribute(&quot;hello&quot;);</span><br><span class="line">然后我可以在其它的页面当中通过,session.getAttribute(参数);得到我设置过的属性！</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h2 id="最后h5新增的特性就差不多这样啦-本萌新刚入这一行没多久-如果有补充或者纠错可以在下方评论系统中留言-我会及时回应-谢谢大家"><a href="#最后h5新增的特性就差不多这样啦-本萌新刚入这一行没多久-如果有补充或者纠错可以在下方评论系统中留言-我会及时回应-谢谢大家" class="headerlink" title="最后h5新增的特性就差不多这样啦,本萌新刚入这一行没多久,如果有补充或者纠错可以在下方评论系统中留言,我会及时回应,谢谢大家,"></a>最后h5新增的特性就差不多这样啦,本萌新刚入这一行没多久,如果有补充或者纠错可以在下方评论系统中留言,我会及时回应,谢谢大家,</h2></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E5%B2%B3%E4%BA%91%E9%B9%8F.jpg" alt="我说了,我真的不帅,这年头帅也是一种错吗"></p>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/01/26/hello-world/"/>
      <url>/2017/01/26/hello-world/</url>
      
        <content type="html"><![CDATA[<blockquote><p>hello,我是泰戈尔,来听听我的心里话吧</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="https://ittiger.top/%E6%96%87%E7%AB%A0%E5%A4%B4%E5%9B%BE.png"></p><h4 id="你好，世界。这里是泰戈尔的个人主页，非常欢迎您的到来，这里算是我的私人空间，但是我愿意与您分享，因为我想让大家知道这里的存在，这里将会是我记录生活、学习、工作的时候的平台，but，不是唯一的，你还可以去各大平台找到我，如果您不介意的话，还可以关注我，在这里你可以了解到很多，科技，技术，有趣的事。"><a href="#你好，世界。这里是泰戈尔的个人主页，非常欢迎您的到来，这里算是我的私人空间，但是我愿意与您分享，因为我想让大家知道这里的存在，这里将会是我记录生活、学习、工作的时候的平台，but，不是唯一的，你还可以去各大平台找到我，如果您不介意的话，还可以关注我，在这里你可以了解到很多，科技，技术，有趣的事。" class="headerlink" title="你好，世界。这里是泰戈尔的个人主页，非常欢迎您的到来，这里算是我的私人空间，但是我愿意与您分享，因为我想让大家知道这里的存在，这里将会是我记录生活、学习、工作的时候的平台，but，不是唯一的，你还可以去各大平台找到我，如果您不介意的话，还可以关注我，在这里你可以了解到很多，科技，技术，有趣的事。"></a>你好，世界。这里是泰戈尔的个人主页，非常欢迎您的到来，这里算是我的私人空间，但是我愿意与您分享，因为我想让大家知道这里的存在，这里将会是我记录生活、学习、工作的时候的平台，but，不是唯一的，你还可以去各大平台找到我，如果您不介意的话，还可以关注我，在这里你可以了解到很多，科技，技术，有趣的事。</h4><h4 id="未来每个人都可以是一个独立的“开发工程师”，未来每个人都可以参与到网络世界的建设中来。没错，你也可以是一名开发者。前提是你必须有一点开发的能力。相信科技，相信科学，相信美好的事情即将发生。"><a href="#未来每个人都可以是一个独立的“开发工程师”，未来每个人都可以参与到网络世界的建设中来。没错，你也可以是一名开发者。前提是你必须有一点开发的能力。相信科技，相信科学，相信美好的事情即将发生。" class="headerlink" title="未来每个人都可以是一个独立的“开发工程师”，未来每个人都可以参与到网络世界的建设中来。没错，你也可以是一名开发者。前提是你必须有一点开发的能力。相信科技，相信科学，相信美好的事情即将发生。"></a>未来每个人都可以是一个独立的“开发工程师”，未来每个人都可以参与到网络世界的建设中来。没错，你也可以是一名开发者。前提是你必须有一点开发的能力。相信科技，相信科学，相信美好的事情即将发生。</h4><h4 id="少年，保重好身体，这里不是我们的战场，我们的战场在下个时代——-物联网时代。物联网时代：“万物互联”，物联网时代依靠互联网为坚实基础，依靠人工智能为辅助工具，依靠5G（高速网络）为驱动力的伟大时代。"><a href="#少年，保重好身体，这里不是我们的战场，我们的战场在下个时代——-物联网时代。物联网时代：“万物互联”，物联网时代依靠互联网为坚实基础，依靠人工智能为辅助工具，依靠5G（高速网络）为驱动力的伟大时代。" class="headerlink" title="少年，保重好身体，这里不是我们的战场，我们的战场在下个时代——-物联网时代。物联网时代：“万物互联”，物联网时代依靠互联网为坚实基础，依靠人工智能为辅助工具，依靠5G（高速网络）为驱动力的伟大时代。"></a>少年，保重好身体，这里不是我们的战场，我们的战场在下个时代——-物联网时代。物联网时代：“万物互联”，物联网时代依靠互联网为坚实基础，依靠人工智能为辅助工具，依靠5G（高速网络）为驱动力的伟大时代。</h4><h4 id="常见的应用场景有："><a href="#常见的应用场景有：" class="headerlink" title="常见的应用场景有："></a>常见的应用场景有：</h4><h5 id="1：智能生态家居；"><a href="#1：智能生态家居；" class="headerlink" title="1：智能生态家居；"></a>1：智能生态家居；</h5><h5 id="2：汽车无人驾驶技术"><a href="#2：汽车无人驾驶技术" class="headerlink" title="2：汽车无人驾驶技术"></a>2：汽车无人驾驶技术</h5><h5 id="3：远程低延迟的设备操控"><a href="#3：远程低延迟的设备操控" class="headerlink" title="3：远程低延迟的设备操控"></a>3：远程低延迟的设备操控</h5><h5 id="4：甚至于“脑机”技术衍生的应用"><a href="#4：甚至于“脑机”技术衍生的应用" class="headerlink" title="4：甚至于“脑机”技术衍生的应用"></a>4：甚至于“脑机”技术衍生的应用</h5><h4 id="未来每一台电子设备都能够使用同一套操作系统，设备间的数据传输变得简单高效，"><a href="#未来每一台电子设备都能够使用同一套操作系统，设备间的数据传输变得简单高效，" class="headerlink" title="未来每一台电子设备都能够使用同一套操作系统，设备间的数据传输变得简单高效，"></a>未来每一台电子设备都能够使用同一套操作系统，设备间的数据传输变得简单高效，</h4><h5 id="在最后，也应该关注科技落后的地区，同时每个人都应该适当性的做一些慈善。祝愿祖国未来将会更加美好。"><a href="#在最后，也应该关注科技落后的地区，同时每个人都应该适当性的做一些慈善。祝愿祖国未来将会更加美好。" class="headerlink" title="在最后，也应该关注科技落后的地区，同时每个人都应该适当性的做一些慈善。祝愿祖国未来将会更加美好。"></a>在最后，也应该关注科技落后的地区，同时每个人都应该适当性的做一些慈善。祝愿祖国未来将会更加美好。</h5>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
