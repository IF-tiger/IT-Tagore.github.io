<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Flex布局详解</title>
      <link href="/2020/08/20/Flex%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/08/20/Flex%E5%B8%83%E5%B1%80%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="hello-各位大佬-我是泰戈尔-今天给大家总结以下Flex布局"><a href="#hello-各位大佬-我是泰戈尔-今天给大家总结以下Flex布局" class="headerlink" title="hello,各位大佬,我是泰戈尔,今天给大家总结以下Flex布局,"></a><strong>hello,各位大佬,我是泰戈尔,今天给大家总结以下Flex布局,</strong></h2><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E6%B3%B0%E6%88%88%E5%B0%94logo.png"></p><h5 id="为什么会有网页布局这一说"><a href="#为什么会有网页布局这一说" class="headerlink" title="为什么会有网页布局这一说"></a>为什么会有网页布局这一说</h5><blockquote><p>因为传统的布局解决方案,是基于盒模型,依赖display属性和position属性和float属性,他对于那些特殊的布局非常不方便,因此不久后Flex布局应运而生,它的出现可以简便.完整,响应式的实现各种页面布局,</p></blockquote><hr><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/flexbox.png" alt="CSS Flexbox"></p><hr><h3 id="现在已经全部支持市场上的浏览器-并且兼容性良好-下面我们一起来看看吧"><a href="#现在已经全部支持市场上的浏览器-并且兼容性良好-下面我们一起来看看吧" class="headerlink" title="现在已经全部支持市场上的浏览器,并且兼容性良好,下面我们一起来看看吧"></a>现在已经全部支持市场上的浏览器,并且兼容性良好,下面我们一起来看看吧</h3><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E6%94%AF%E6%8C%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8.jpg" alt="支持的浏览器"></p><h3 id="首先我们需要了解一下相关概念–什么是Flex布局"><a href="#首先我们需要了解一下相关概念–什么是Flex布局" class="headerlink" title="首先我们需要了解一下相关概念–什么是Flex布局?"></a>首先我们需要了解一下相关概念–什么是Flex布局?</h3><h6 id="Flex是Flexible-Box的缩写-意思是”弹性布局”-用来为盒装-模型提供最大的灵活性"><a href="#Flex是Flexible-Box的缩写-意思是”弹性布局”-用来为盒装-模型提供最大的灵活性" class="headerlink" title="Flex是Flexible Box的缩写,意思是”弹性布局”,用来为盒装#模型提供最大的灵活性."></a>Flex是Flexible Box的缩写,意思是”弹性布局”,用来为盒装#模型提供最大的灵活性.</h6><h6 id="任何一个容器都可以指定为Flex布局"><a href="#任何一个容器都可以指定为Flex布局" class="headerlink" title="任何一个容器都可以指定为Flex布局"></a>任何一个容器都可以指定为Flex布局</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一个块级元素可以当作一个容器,使用Flex布局</span><br><span class="line">.box &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 行内元素也可以当作一个容器,使用Flex布局</span><br><span class="line">.box &#123;</span><br><span class="line">    display: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="因为浏览器的内核不同-考虑兼容性-所以我们要在Webkit内核的浏览器上加上-webkit前缀"><a href="#因为浏览器的内核不同-考虑兼容性-所以我们要在Webkit内核的浏览器上加上-webkit前缀" class="headerlink" title="因为浏览器的内核不同,考虑兼容性,所以我们要在Webkit内核的浏览器上加上-webkit前缀."></a>因为浏览器的内核不同,考虑兼容性,所以我们要在Webkit内核的浏览器上加上-webkit前缀.</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 这样在属性值前面加上-webkit以-隔开的话,可以让webkit内核的浏览器也可以使用Flex布局.</span><br><span class="line">.box&#123;</span><br><span class="line">  display: -webkit-flex; &#x2F;* Safari *&#x2F;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p></blockquote><h5 id="采用Flex布局的元素-称为Flex容器-flex-container-简称”容器”-它的所有子元素-自动成为此容器的成员-称为Flex项目-flex-item-简称’项目’"><a href="#采用Flex布局的元素-称为Flex容器-flex-container-简称”容器”-它的所有子元素-自动成为此容器的成员-称为Flex项目-flex-item-简称’项目’" class="headerlink" title="采用Flex布局的元素,称为Flex容器(flex container),简称”容器”,它的所有子元素,自动成为此容器的成员,称为Flex项目(flex item),简称’项目’."></a>采用Flex布局的元素,称为Flex容器(flex container),简称”容器”,它的所有子元素,自动成为此容器的成员,称为Flex项目(flex item),简称’项目’.</h5><hr><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071004.png" alt="flex item"></p><hr><h3 id="容器默认存在两根轴-水平的主轴-mian-axis-和垂直的交叉轴-cross-axis-类似于数学函数中的坐标轴-主轴的开始位置-与边框的交叉点-叫做main-start-结束位置叫做main-end-交叉轴的开始位置叫做cross-start-结束位置叫做cross-end"><a href="#容器默认存在两根轴-水平的主轴-mian-axis-和垂直的交叉轴-cross-axis-类似于数学函数中的坐标轴-主轴的开始位置-与边框的交叉点-叫做main-start-结束位置叫做main-end-交叉轴的开始位置叫做cross-start-结束位置叫做cross-end" class="headerlink" title="容器默认存在两根轴: 水平的主轴(mian axis) 和垂直的交叉轴(cross axis),类似于数学函数中的坐标轴.主轴的开始位置,(与边框的交叉点)叫做main start, 结束位置叫做main end; 交叉轴的开始位置叫做cross start,结束位置叫做cross end."></a>容器默认存在两根轴: 水平的主轴(mian axis) 和垂直的交叉轴(cross axis),类似于数学函数中的坐标轴.主轴的开始位置,(与边框的交叉点)叫做main start, 结束位置叫做main end; 交叉轴的开始位置叫做cross start,结束位置叫做cross end.</h3><h4 id="被设置flex属性的容器会有六个属性"><a href="#被设置flex属性的容器会有六个属性" class="headerlink" title="被设置flex属性的容器会有六个属性"></a>被设置flex属性的容器会有六个属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1. flex-direction</span><br><span class="line"></span><br><span class="line">2. flex-wrap</span><br><span class="line"></span><br><span class="line">3. flex-flow</span><br><span class="line"></span><br><span class="line">4. justify-content</span><br><span class="line"></span><br><span class="line">5. align-items</span><br><span class="line"></span><br><span class="line">6.align-content</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>flex-direction属性</p></blockquote><h6 id="flex-direction属性决定主轴的方向（即项目的排列方向）。"><a href="#flex-direction属性决定主轴的方向（即项目的排列方向）。" class="headerlink" title="flex-direction属性决定主轴的方向（即项目的排列方向）。"></a><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 此时容器内项目的排列方向由flex-direction决定</span><br><span class="line">.box &#123;</span><br><span class="line">  flex-direction: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="flex-direction有四个值"><a href="#flex-direction有四个值" class="headerlink" title="flex-direction有四个值."></a><code>flex-direction</code>有四个值.</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">1, row(默认值):主轴为水平方向,起点在左端,</span><br><span class="line"></span><br><span class="line">2, row-reverse: 主轴为水平方向,起点在右端,</span><br><span class="line"></span><br><span class="line">3, column: 主轴为垂直方向,起点在上沿,</span><br><span class="line"></span><br><span class="line">4, column-reverse: 主轴为垂直方向,起点在下沿,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071005.png"></p><hr><blockquote><p>flex-wrap属性</p></blockquote><h6 id="默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。"><a href="#默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。" class="headerlink" title="默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。"></a>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</h6><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071006.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">    flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="flex-wrap有三个值"><a href="#flex-wrap有三个值" class="headerlink" title="flex-wrap有三个值,"></a><code>flex-wrap</code>有三个值,</h6><blockquote><p>1, <code>nowrap</code>（默认):不换行.</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071007.png"></p><blockquote><p>2, <code>wrap</code>：换行，第一行在上方.</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071008.jpg"></p><blockquote><p>3, <code>wrap-reverse</code>：换行，第一行在下方</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071009.jpg"></p><hr><blockquote><p>flex-flow属性</p></blockquote><h6 id="flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row-nowrap。"><a href="#flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row-nowrap。" class="headerlink" title="flex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。"></a><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># flex-flow属性是前面两种属性的简写的组合形式,</span><br><span class="line">.box &#123;</span><br><span class="line">  flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>justify-content属性</p></blockquote><h6 id="justify-content属性定义了每个子元素在主轴上的对齐方式"><a href="#justify-content属性定义了每个子元素在主轴上的对齐方式" class="headerlink" title="justify-content属性定义了每个子元素在主轴上的对齐方式"></a><code>justify-content</code>属性定义了每个子元素在主轴上的对齐方式</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071010.png"></p><hr><blockquote><p>justify-content可以有五个值,</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1, flex-start（默认值）：左对齐</span><br><span class="line"></span><br><span class="line">2, flex-end：右对齐</span><br><span class="line"></span><br><span class="line">3, center： 居中</span><br><span class="line"></span><br><span class="line">4, space-between：两端对齐，项目之间的间隔都相等。</span><br><span class="line"></span><br><span class="line">5, space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>align-items属性</p></blockquote><h6 id="align-items属性定义项目在交叉轴上如何对齐"><a href="#align-items属性定义项目在交叉轴上如何对齐" class="headerlink" title="align-items属性定义项目在交叉轴上如何对齐"></a><code>align-items</code>属性定义项目在交叉轴上如何对齐</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  align-items: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071011.png"></p><blockquote><p>align-items有五个值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">flex-start：交叉轴的起点对齐。</span><br><span class="line"></span><br><span class="line">flex-end：交叉轴的终点对齐。</span><br><span class="line"></span><br><span class="line">center：交叉轴的中点对齐。</span><br><span class="line"></span><br><span class="line">baseline: 项目的第一行文字的基线对齐。</span><br><span class="line"></span><br><span class="line">stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><blockquote><p>align-content属性</p></blockquote><h6 id="align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用"><a href="#align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用" class="headerlink" title="align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用"></a><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.box &#123;</span><br><span class="line">  align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071012.png"></p><hr><blockquote><p>align-content有六个值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">flex-start：与交叉轴的起点对齐。</span><br><span class="line"></span><br><span class="line">flex-end：与交叉轴的终点对齐。</span><br><span class="line"></span><br><span class="line">center：与交叉轴的中点对齐。</span><br><span class="line"></span><br><span class="line">space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</span><br><span class="line"></span><br><span class="line">space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</span><br><span class="line"></span><br><span class="line">stretch（默认值）：轴线占满整个交叉轴。</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h3 id="当给一个容器设置flex属性的时候-那么其内部的所有元素也同时有了一些属性下面我们一起来看一看"><a href="#当给一个容器设置flex属性的时候-那么其内部的所有元素也同时有了一些属性下面我们一起来看一看" class="headerlink" title="当给一个容器设置flex属性的时候,那么其内部的所有元素也同时有了一些属性下面我们一起来看一看,"></a>当给一个容器设置flex属性的时候,那么其内部的所有元素也同时有了一些属性下面我们一起来看一看,</h3></blockquote><h6 id="以下属性是设置在容器内部的元素上的"><a href="#以下属性是设置在容器内部的元素上的" class="headerlink" title="以下属性是设置在容器内部的元素上的"></a>以下属性是设置在容器内部的元素上的</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">order</span><br><span class="line"></span><br><span class="line">flex-grow</span><br><span class="line"></span><br><span class="line">flex-shrink</span><br><span class="line"></span><br><span class="line">flex-basis</span><br><span class="line"></span><br><span class="line">flex</span><br><span class="line"></span><br><span class="line">align-self</span><br></pre></td></tr></table></figure><blockquote><h6 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h6></blockquote><h6 id="order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0"><a href="#order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0" class="headerlink" title="order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0"></a><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  order: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071013.png"></p><hr><blockquote><h6 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h6></blockquote><h6 id="flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大"><a href="#flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大" class="headerlink" title="flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大"></a><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  flex-grow: &lt;number&gt;; &#x2F;* default 0 *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071014.png"></p><hr><blockquote><h4 id="如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍"><a href="#如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍" class="headerlink" title="如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍"></a>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍</h4></blockquote><blockquote><h6 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h6></blockquote><h6 id="flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小"><a href="#flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小" class="headerlink" title="flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小"></a><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  flex-shrink: &lt;number&gt;; &#x2F;* default 1 *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071015.jpg"></p><hr><blockquote><h4 id="如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小-负值对该属性无效"><a href="#如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小-负值对该属性无效" class="headerlink" title="如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小,负值对该属性无效"></a>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小,负值对该属性无效</h4></blockquote><blockquote><h6 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h6></blockquote><h6 id="flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main-size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小"><a href="#flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main-size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小" class="headerlink" title="flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小"></a><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.item &#123;</span><br><span class="line">  flex-basis: &lt;length&gt; | auto; &#x2F;* default auto *&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间"><a href="#它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间" class="headerlink" title="它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间"></a>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间</h5></blockquote><blockquote><h6 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h6></blockquote><h6 id="flex属性是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选"><a href="#flex属性是flex-grow-flex-shrink-和-flex-basis的简写，默认值为0-1-auto。后两个属性可选" class="headerlink" title="flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选"></a><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  flex: none | [ &lt;&#39;flex-grow&#39;&gt; &lt;&#39;flex-shrink&#39;&gt;? || &lt;&#39;flex-basis&#39;&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h5 id="该属性有两个快捷值：auto-1-1-auto-和-none-0-0-auto-。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值"><a href="#该属性有两个快捷值：auto-1-1-auto-和-none-0-0-auto-。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值" class="headerlink" title="该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值"></a>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值</h5></blockquote><hr><blockquote><h6 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h6></blockquote><h6 id="align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch"><a href="#align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch" class="headerlink" title="align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch"></a><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.item &#123;</span><br><span class="line">  align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015071016.png"></p><blockquote><h4 id="该属性可以有6个值-除了auto-其他的值都与align-items属性完全一致"><a href="#该属性可以有6个值-除了auto-其他的值都与align-items属性完全一致" class="headerlink" title="该属性可以有6个值,除了auto,其他的值都与align-items属性完全一致"></a>该属性可以有6个值,除了auto,其他的值都与align-items属性完全一致</h4></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> Css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Flex布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6新增特性</title>
      <link href="/2018/09/26/es6%E6%96%B0%E5%A2%9E%E7%89%B9%E6%80%A7/"/>
      <url>/2018/09/26/es6%E6%96%B0%E5%A2%9E%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>我们从node开始，会大量用到ES6中的一些新语法，因此在学习node之前需要先学习一下es6中提供的新语法</p><h2 id="javascript的诞生"><a href="#javascript的诞生" class="headerlink" title="javascript的诞生"></a>javascript的诞生</h2><ul><li>1992年底，美国国家超级电脑应用中心（NCSA）开始开发一个独立的浏览器，叫做 Mosaic。这是人类历史上第一个浏览器，从此网页可以在图形界面的窗口浏览。 </li><li>1994年10月，  Netscape （网景）公司，就是在 Mosaic 的基础上，开发面向普通用户的新一代的浏览器 Netscape Navigator。 </li><li>1994年12月，Navigator 发布了1.0版，市场份额一举超过90%。 </li><li>Netscape 公司很快发现，Navigator 浏览器需要一种可以嵌入网页的脚本语言，用来控制浏览器行为。 因为当时网速特别的慢，很多表单的校验不适合放在服务器端进行校验。管理层对于这种脚本语言的设想是：<strong>功能不需要太强大，语法要简单，容易学习和使用</strong></li><li>1995年，Netscape 公司雇佣了程序员<code>Brendan Eich 布兰登·艾奇</code> 开发这种网页脚本语言。 </li><li>1995年5月，Brendan Eich 只用了10天，就设计完成了这种语言的第一版，叫做<code>LiveScript</code>。它是一个大杂烩，语法有多个来源。<ul><li>基本语法：借鉴 C 语言和 Java 语言。</li><li>数据结构：借鉴 Java 语言，包括将值分成原始值和对象两大类。</li><li>函数的用法：借鉴 Scheme 语言和 Awk 语言，将函数当作第一等公民，并引入闭包。</li><li>原型继承模型：借鉴 Self 语言（Smalltalk 的一种变种）。</li><li>正则表达式：借鉴 Perl 语言。</li><li>字符串和数组处理：借鉴 Python 语言。</li></ul></li><li>为了保持简单，这种脚本语言缺少一些关键的功能，比如块级作用域、模块、子类型（subtyping）等等，但是可以利用现有功能找出解决办法。 <strong>后果：对于其他的编程语言，你需要只需要学习该语言提供的各种语法即可。对于javascript，你需要学习解决问题的各种模式，比如原型，原型链实现继承，闭包等等</strong></li><li>1995年 12月，Netscape 公司与 Sun 公司合作，后者允许将这种语言叫做 JavaScript。把LiveScript改名成了Javascript</li><li><strong>注意：javascript实质上和java没有什么关系</strong></li></ul><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/java%E5%92%8Cjavascript%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="Javascript"></p><h2 id="ECMAScript与Javascript的关系"><a href="#ECMAScript与Javascript的关系" class="headerlink" title="ECMAScript与Javascript的关系"></a>ECMAScript与Javascript的关系</h2><p>1996年11月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给国际标准化组织ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript ，这个版本就是1.0版。</p><p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript ，有两个原因。一是商标，Java是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA ，不是 Netscape ，这样有利于保证这门语言的开放性和中立性。</p><p>ECMAScript，简称ES，是由Ecma国际（欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）按照标准制定的一种脚本语言规范。</p><p>JavaScript是按ECMAScript规范实现的一种脚本语言，JavaScript除了实现了ECMAScript规范，还提供了BOM和DOM的操作。</p><h2 id="ECMAScript版本历史"><a href="#ECMAScript版本历史" class="headerlink" title="ECMAScript版本历史"></a>ECMAScript版本历史</h2><ul><li><p>ES1.0, 1997年06月发布</p></li><li><p>ES2.0, 1998年06月发布</p></li><li><p>ES3.0, 1999年12月发布</p></li><li><p>ES4.0,  由于关于语言的复杂性出现了分歧。放弃发布</p></li><li><p>ES5.0, 2009年12月发布， 增加了严格模式，增加了少量语法，为ES6铺路</p></li><li><p>ES6.0, 2015年6月发布，增加了大量的新概念和语法特性</p><ul><li><strong>第六版的名字， 可以叫做ECMAScript6.0(ES), 也可以叫做ECMAScript 2015（ES2015）</strong></li><li>ECMA组织决定以后每年6月份都会发布一版新的语法标准，比如ES7(ECMAScript 2016) </li><li><strong>通过我们说的ES6泛指ES5之后的下一代标准，涵盖了ES6, ES7, ES8….</strong>  </li></ul></li><li><p>参考书籍： <a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a> </p></li></ul><h1 id="ES5-数组的新方法"><a href="#ES5-数组的新方法" class="headerlink" title="ES5-数组的新方法"></a>ES5-数组的新方法</h1><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p><code>forEach()</code> 方法对数组的每个元素执行一次提供的函数。功能等同于<code>for</code>循环.</p><p>应用场景：为一些相同的元素，绑定事件处理器！强调的是数组中每一项都要遍历</p><p>作用：</p><ul><li>1.只能是用来遍历 </li><li>2.一旦开始了遍历就停不下来</li><li>3.返回值是undefined  对于我们来说没有用</li></ul><p><strong>需求：遍历数组[“张飞”,”关羽”,”赵云”,”马超”]</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;张飞&quot;</span>,<span class="string">&quot;关羽&quot;</span>,<span class="string">&quot;赵云&quot;</span>,<span class="string">&quot;马超&quot;</span>];</span><br><span class="line"><span class="comment">//第一个参数：element，数组的每一项元素</span></span><br><span class="line"><span class="comment">//第二个参数：index，数组的下标</span></span><br><span class="line"><span class="comment">//第三个参数：array，正在遍历的数组</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(element, index, array);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</p><p><strong>需求：遍历数组，求每一项的平方存在于一个数组中</strong></p><p><strong>作用：</strong></p><ul><li>1.可以循环遍历数组中的每一项数据</li><li>2.可以对循环遍历到的每一项数据进行操作</li><li>3.<strong>==重点应用场景: 对数组中的每一项数据进行操作,比如：给每数组中的每一项添加一个相同的样式==</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];  <span class="comment">// 1 4 9 16 25</span></span><br><span class="line"><span class="comment">//第一个参数：element，数组的每一项元素</span></span><br><span class="line"><span class="comment">//第二个参数：index，数组的下标</span></span><br><span class="line"><span class="comment">//第三个参数：array，正在遍历的数组</span></span><br><span class="line"><span class="comment">//返回值：一个新数组，每个元素都是回调函数的结果。</span></span><br><span class="line"><span class="keyword">var</span> newArray = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element * element;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArray);<span class="comment">//[1,4,9,16,25]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 学了箭头函数之后的简写如下:</span></span><br><span class="line"><span class="keyword">var</span> res = nums.map(<span class="function"><span class="params">item</span> =&gt;</span> item * item )</span><br></pre></td></tr></table></figure><p>案例：获取所有的名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;rose&#x27;</span>, <span class="attr">age</span>: <span class="number">21</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&#x27;jerry&#x27;</span>, <span class="attr">age</span>: <span class="number">19</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">let</span> res = list.map(<span class="function"><span class="params">item</span> =&gt;</span> item.name)</span><br><span class="line">    <span class="built_in">console</span>.log(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><p><code>filter</code>用于过滤掉“不合格”的元素<br>返回一个新数组，如果在回调函数中返回true，那么就留下来，如果返回false，就扔掉</p><p><strong>需求：遍历数组，将数组中工资超过5000的值找出来[1000, 5000, 20000, 3000, 10000, 800, 1500]</strong></p><p><strong>作用:</strong></p><ul><li>1.可以循环遍历数组中的每一项</li><li>2.可以对循环遍历到的数据进行判断</li><li>3.当条件成立时,使用了return true后会将满足条件的那一项存到一个新的数组当中</li><li>4.<strong>==重点应用场景:根据条件过滤数组中的数据==</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1000</span>, <span class="number">5000</span>, <span class="number">20000</span>, <span class="number">3000</span>, <span class="number">10000</span>, <span class="number">800</span>, <span class="number">1500</span>];</span><br><span class="line"><span class="comment">//第一个参数：element，数组的每一项元素</span></span><br><span class="line"><span class="comment">//第二个参数：index，数组的下标</span></span><br><span class="line"><span class="comment">//第三个参数：array，正在遍历的数组</span></span><br><span class="line"><span class="comment">//返回值：一个新数组，存储了所有返回true的元素</span></span><br><span class="line"><span class="keyword">var</span> newArray = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, array</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(element &gt; <span class="number">5000</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArray);<span class="comment">//[1000, 5000, 3000, 800, 1500]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 学了箭头函数之后的简写如下:</span></span><br><span class="line"><span class="keyword">var</span> res = nums.filter(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">5000</span>)</span><br></pre></td></tr></table></figure><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p><code>some</code>用于遍历数组，如果有至少一个满足条件，就返回true，否则返回false。</p><p>**需求：遍历数组，查找数组中的某条数据 比如：查找[10, 20, 30, 40, 50, 60] 中的30</p><p>作用:</p><ul><li>1.可以用来循环遍历数组中的每一项</li><li>2.在回调函数中进行条件判断，如果return true执行之后，会阻止后续代码的遍历执行</li><li>3.重点应用场景: <strong>==条件成立时不再执行后续的循环==</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找数组有没有30 如果有，就不要再向下遍历了</span></span><br><span class="line">   <span class="keyword">let</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line"></span><br><span class="line">   nums.some(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">     <span class="comment">// console.log(item,index,arr);</span></span><br><span class="line">     <span class="keyword">if</span> (item == <span class="number">30</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="built_in">console</span>.log(item);</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p><code>every</code>用于遍历数组，只有当所有的元素返回true，才返回true，否则返回false。</p><p><strong>需求：遍历数组，判断==整体==是否都满足条件</strong></p><p>作用：</p><ul><li>1.可以对数组中的每一项进行遍历，但是只打印第一项</li><li>2.对数组中的每一项进行判断，都满足条件则返回true,如果有一项不满足条件则返回false</li><li>3.==应用场景：重点是强调整体的一个处理结果，比如，某班考试成绩是否都合格==</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// every 比如说: 考试完成之后,判断一下成绩当中是否有不及格的 如果都满足条件则返回true,有一个不满足条件则返回false</span></span><br><span class="line">    <span class="comment">// var score = [100,99,96,93,65,74,41,25,62,18];</span></span><br><span class="line">    <span class="keyword">var</span> score = [<span class="number">100</span>,<span class="number">99</span>,<span class="number">62</span>,<span class="number">25</span>,<span class="number">88</span>];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> flag =  score.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,arr</span>)</span>&#123;</span><br><span class="line">      <span class="comment">// console.log(item,index,arr);</span></span><br><span class="line">      <span class="keyword">return</span> item &gt; <span class="number">60</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(flag);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学了箭头函数之后的简写如下:</span></span><br><span class="line"><span class="keyword">var</span> res = nums.every(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">60</span>)</span><br></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><blockquote><p><code>**reduce()**</code> 方法对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数，将其结果汇总为单个返回值 </p></blockquote><p>语法：<code>reduce(callback, initValue)</code></p><p>callback: 每个元素都会执行一次的回调函数</p><p>initValue: 初始值</p><p>callback的4个参数</p><ul><li>prev： 上一次的值，第一次为初始值</li><li>item:  当前值</li><li>index: 下标</li><li>arr: 数组</li></ul><p>案例：计算数组所有值的和</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]</span><br><span class="line"><span class="keyword">var</span> res = nums.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, item</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// console.log(prev, item);</span></span><br><span class="line">      <span class="keyword">return</span> prev + item</span><br><span class="line"> &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 学了箭头函数之后的简写如下:</span></span><br><span class="line"><span class="keyword">var</span> res = nums.reduce(<span class="function">(<span class="params">prev,item</span>)=&gt;</span>prev + item)</span><br></pre></td></tr></table></figure><h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><blockquote><p>ES6中提供了两个声明变量的关键字：const和let </p></blockquote><h3 id="let的使用"><a href="#let的使用" class="headerlink" title="let的使用"></a>let的使用</h3><p>ES6 新增了<code>let</code>命令，用来声明变量。它的用法类似于<code>var</code>。</p><ul><li>let声明的变量只有在当前作用域有效</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>不存在变量提升</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><ul><li>不允许重复声明</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;<span class="comment">//报错 Identifier &#x27;a&#x27; has already been declared</span></span><br></pre></td></tr></table></figure><h3 id="const的使用"><a href="#const的使用" class="headerlink" title="const的使用"></a>const的使用</h3><p><code>const</code>声明一个只读的常量。常量：值不可以改变的量 </p><ul><li>const声明的量不可以改变</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">PI = <span class="number">3</span>; <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><ul><li>const声明的变量必须赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num;</span><br></pre></td></tr></table></figure><ul><li>如果const声明了一个对象，仅仅保证地址不变</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">name</span>:<span class="string">&#x27;zs&#x27;</span>&#125;;</span><br><span class="line">obj.age = <span class="number">18</span>;<span class="comment">//正确</span></span><br><span class="line">obj = &#123;&#125;;<span class="comment">//报错</span></span><br></pre></td></tr></table></figure><ul><li>其他用法和let一样</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 只能在当前代码块中使用</span><br><span class="line"><span class="number">2.</span> 不会提升</span><br><span class="line"><span class="number">3.</span> 不能重复</span><br></pre></td></tr></table></figure><h3 id="let与const的使用场景"><a href="#let与const的使用场景" class="headerlink" title="let与const的使用场景"></a>let与const的使用场景</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 如果声明的变量不需要改变，那么使用<span class="keyword">const</span></span><br><span class="line"><span class="number">2.</span> 如果声明的变量需要改变，那么用<span class="keyword">let</span></span><br><span class="line"><span class="number">3.</span> 学了<span class="keyword">const</span>和<span class="keyword">let</span>之后，尽量别用<span class="keyword">var</span></span><br></pre></td></tr></table></figure><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>以前，为变量赋值，只能直接指定值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>ES6 允许写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>解构默认值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">0</span>, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>解构不仅可以用于数组，还可以用于对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">foo <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line">bar <span class="comment">// &quot;bbb&quot;</span></span><br></pre></td></tr></table></figure><p>如果变量名与属性名不一致，必须写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">bar</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line">baz <span class="comment">// &quot;aaa&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">first</span>: <span class="string">&#x27;hello&#x27;</span>, <span class="attr">last</span>: <span class="string">&#x27;world&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">first</span>: f, <span class="attr">last</span>: l &#125; = obj;</span><br><span class="line">f <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line">l <span class="comment">// &#x27;world&#x27;</span></span><br></pre></td></tr></table></figure><p>函数的参数也可以使用解构赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h3><p>传统的 JavaScript 语言，输出模板通常是这样写的（下面使用了 jQuery 的方法）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#result&#x27;</span>).append(</span><br><span class="line">  <span class="string">&#x27;There are &lt;b&gt;&#x27;</span> + basket.count + <span class="string">&#x27;&lt;/b&gt; &#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;items in your basket, &#x27;</span> +</span><br><span class="line">  <span class="string">&#x27;&lt;em&gt;&#x27;</span> + basket.onSale +</span><br><span class="line">  <span class="string">&#x27;&lt;/em&gt; are on sale!&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>上面这种写法相当繁琐不方便，ES6 引入了模板字符串解决这个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;#result&#x27;</span>).append(<span class="string">`</span></span><br><span class="line"><span class="string">  There are &lt;b&gt;<span class="subst">$&#123;basket.count&#125;</span>&lt;/b&gt; items</span></span><br><span class="line"><span class="string">   in your basket, &lt;em&gt;<span class="subst">$&#123;basket.onSale&#125;</span>&lt;/em&gt;</span></span><br><span class="line"><span class="string">  are on sale!</span></span><br><span class="line"><span class="string">`</span>);</span><br></pre></td></tr></table></figure><p>字符串模版的优点</p><ul><li>允许换行</li><li>可以使用插值  <code>$&#123;&#125;</code></li></ul><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><ul><li>**includes()**：返回布尔值，表示是否找到了参数字符串。</li><li>**startsWith()**：返回布尔值，表示参数字符串是否在原字符串的头部。</li><li>**endsWith()**：返回布尔值，表示参数字符串是否在原字符串的尾部。</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p><strong>find是ES6新增的语法</strong></p><p><code>find()</code> 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined"><code>undefined</code></a>。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一个大于10的数</span></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> found = array1.find(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(found);</span><br></pre></td></tr></table></figure><h3 id="findexIndex"><a href="#findexIndex" class="headerlink" title="findexIndex"></a>findexIndex</h3><p><strong>findIndex是ES6新增的语法</strong></p><p><code>findIndex()</code>方法返回数组中满足提供的测试函数的第一个元素的<strong>索引</strong>。否则返回-1。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取第一个大于10的下标</span></span><br><span class="line"><span class="keyword">var</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findFirstLargeNumber</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt; <span class="number">13</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(array1.findIndex(findFirstLargeNumber));</span><br></pre></td></tr></table></figure><h2 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h2><h2 id="函数-箭头函数"><a href="#函数-箭头函数" class="headerlink" title="函数-箭头函数"></a>函数-箭头函数</h2><p>ES6标准新增了一种新的函数：Arrow Function（箭头函数）。</p><p>为什么叫Arrow Function？因为它的定义用的就是一个箭头：</p><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">相当于</span><br><span class="line"><span class="comment">//语法： (参数列表) =&gt; &#123;函数体&#125;</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h3><ul><li>如果没有参数列表，使用()表示参数列表</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 等同于：</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果只有一个参数，可以省略()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 等同于：</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">n1</span>) </span>&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="params">n1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果有多个参数，需要使用()把参数列表括起来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">n1, n2</span>) </span>&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function">(<span class="params">n1, n2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="返回值详解"><a href="#返回值详解" class="headerlink" title="返回值详解"></a>返回值详解</h3><ul><li>如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="keyword">function</span>(<span class="params">n1</span>) </span>&#123;    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = <span class="function"><span class="params">n1</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;哈哈&#x27;</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果函数体只有一行一句，那么可以省略{}和return</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function">(<span class="params">n1, n2</span>) =&gt;</span> n1 + n2;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 箭头函数 </tag>
            
            <tag> es6新特性 </tag>
            
            <tag> 操作数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅拷贝深拷贝的详解</title>
      <link href="/2018/08/24/%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/08/24/%E6%B5%85%E6%8B%B7%E8%B4%9D%E6%B7%B1%E6%8B%B7%E8%B4%9D%E7%9A%84%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><h3 id="hello-我是泰戈尔-今天给大家讲讲深拷贝及浅拷贝的原理"><a href="#hello-我是泰戈尔-今天给大家讲讲深拷贝及浅拷贝的原理" class="headerlink" title="hello,我是泰戈尔,今天给大家讲讲深拷贝及浅拷贝的原理"></a>hello,我是泰戈尔,今天给大家讲讲深拷贝及浅拷贝的原理</h3></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E6%B3%B0%E6%88%88%E5%B0%94logo.png"></p><hr><h2 id="如果要理解前端的深拷贝和浅拷贝-首先要了解什么是简单数据类型和引用-复杂-数据类型"><a href="#如果要理解前端的深拷贝和浅拷贝-首先要了解什么是简单数据类型和引用-复杂-数据类型" class="headerlink" title="如果要理解前端的深拷贝和浅拷贝,首先要了解什么是简单数据类型和引用(复杂)数据类型,"></a>如果要理解前端的深拷贝和浅拷贝,首先要了解什么是简单数据类型和引用(复杂)数据类型,</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">简单数据类型:</span><br><span class="line">1. Number(数字)</span><br><span class="line">2. String(字符串)</span><br><span class="line">3. Boolean(布尔)</span><br><span class="line">4. undefined(声明未定义)</span><br><span class="line">5. null(未赋值)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">复杂数据类型:</span><br><span class="line">1. Object</span><br><span class="line">2. Array</span><br><span class="line">3. Function</span><br><span class="line">4. Math</span><br><span class="line">5. Date等等....</span><br></pre></td></tr></table></figure><blockquote><p>演示什么是简单数据类型</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A3%E7%A0%81.webp"></p><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%89%93%E5%8D%B0.webp"></p><blockquote><p>图片解释其底层原理</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E5%9B%BE%E7%89%87%E8%A7%A3%E9%87%8A%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8E%9F%E7%90%86.webp"></p><blockquote><p>演示什么是复杂数据类型</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%A3%E7%A0%81.webp"></p><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%89%93%E5%8D%B0"></p><blockquote><p>图片解释其底层原理</p></blockquote><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8E%9F%E7%90%86.webp"></p><h3 id="首先什么是拷贝"><a href="#首先什么是拷贝" class="headerlink" title="首先什么是拷贝,"></a>首先什么是拷贝,</h3><blockquote><p>拷贝就是将一个对象<code>obj1</code>复制给另一个对象<code>obj2</code>,且当<code>obj2</code>的数据发生改变时,<code>obj1</code>不会被改变</p></blockquote><h2 id="什么是浅拷贝"><a href="#什么是浅拷贝" class="headerlink" title="什么是浅拷贝:"></a>什么是浅拷贝:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#浅拷贝就是只拷贝对象的一层属性,如果对象里面还有对象,拷贝的是内存地址,并且此时修改数据会对原对象有影响,浅拷贝适用于对象属性里面的值是简单数据类型的</span><br></pre></td></tr></table></figure><h2 id="用代码演示并实现浅拷贝"><a href="#用代码演示并实现浅拷贝" class="headerlink" title="用代码演示并实现浅拷贝:"></a>用代码演示并实现浅拷贝:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 利用for in方法遍历原对象,声明一个新对象,然后使新对象的对应索引的值等于原对象对应索引的值,最后返回这个新对象,</span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">        class: &#39;UI&#39;,</span><br><span class="line">        age: 20,</span><br><span class="line">        love: &#39;eat&#39;</span><br><span class="line">      &#125;</span><br><span class="line">    function getObj(obj) &#123;</span><br><span class="line">        var newObj &#x3D; &#123;&#125;</span><br><span class="line">        for (var k in obj) &#123; </span><br><span class="line">          newObj[k] &#x3D; obj[k]</span><br><span class="line">        &#125;</span><br><span class="line">        return newObj</span><br><span class="line">      &#125;</span><br><span class="line">    var obj2 &#x3D; getObj(obj)</span><br><span class="line"># 只拷贝一层属性的时候,修改数据不会影响原对象内部的数据,</span><br><span class="line"># 如果拷贝的是对象内部的对象的时候,此时修改其数据,会改变原对象的内部的对象的数据,</span><br></pre></td></tr></table></figure><h2 id="什么是深拷贝"><a href="#什么是深拷贝" class="headerlink" title="什么是深拷贝:"></a>什么是深拷贝:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#   深拷贝就是拷贝对象的多层属性,如果对象里面还有对象,会继续拷贝,此时修改其数据不会改变原对象内部的数据,主要使用递归函数去实现.</span><br></pre></td></tr></table></figure><h2 id="用代码演示并实现深拷贝"><a href="#用代码演示并实现深拷贝" class="headerlink" title="用代码演示并实现深拷贝:"></a>用代码演示并实现深拷贝:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#创建一个新对象,利用for in方法,遍历原对象,使原对象对应索引的值等于新创建的对象索引的值,使用 typeof 方法判断对象内部是否全部为简单的数据类型,如果是则直接返回这个对象,如果对象内部还有对象(就是返回值是object的话,则继续遍历,直到对象内部没有对象为止,)</span><br><span class="line">var obj &#x3D; &#123;</span><br><span class="line">        class: &#39;前端&#39;,</span><br><span class="line">        age: 26,</span><br><span class="line">        love: &#123;</span><br><span class="line">          friuts : &#39;apple&#39;,</span><br><span class="line">          meat: &#39;beef&#39;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">function getObj(obj) &#123;</span><br><span class="line">      var newObj &#x3D; &#123;&#125;</span><br><span class="line">      for (var k in obj) &#123; </span><br><span class="line">        newObj[k] &#x3D; typeof obj[k] &#x3D;&#x3D; &#39;object&#39; ? getObj(obj[k]) : obj[k]</span><br><span class="line">      &#125;</span><br><span class="line">      return newObj</span><br><span class="line">    &#125;</span><br><span class="line">    var obj2 &#x3D; getObj(obj)</span><br><span class="line">#    最后可以使用三元表达式对代码进行精简优化</span><br></pre></td></tr></table></figure><blockquote><h2 id="好了到此就讲完了深拷贝和浅拷贝的原理-前端深似海-学习不止步-加油"><a href="#好了到此就讲完了深拷贝和浅拷贝的原理-前端深似海-学习不止步-加油" class="headerlink" title="好了到此就讲完了深拷贝和浅拷贝的原理,前端深似海,学习不止步,加油!"></a>好了到此就讲完了深拷贝和浅拷贝的原理,前端深似海,学习不止步,加油!</h2></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 浅拷贝深拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的使用方法</title>
      <link href="/2018/08/16/git%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2018/08/16/git%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="git-基础入门"><a href="#git-基础入门" class="headerlink" title="git 基础入门"></a>git 基础入门</h1><blockquote><p>Git 是一款免费、开源的<strong>分布式</strong> <strong>版本控制系统</strong> ，用于敏捷高效地处理任何或小或大的项目。</p></blockquote><h2 id="git-的安装"><a href="#git-的安装" class="headerlink" title="git 的安装"></a>git 的安装</h2><p><a href="https://git-scm.com/download/win">下载地址</a></p><p>注意：</p><ol><li>不要安装在中文目录</li><li>不要使用桌面管理软件</li></ol><p>安装很简单，一直下一步即可。在任意的目录下右键，能看到菜单, 就表示安装成功了。</p><p>github 账号注册</p><p><a href="https://github.com/">github 官网</a></p><h2 id="git-三个区"><a href="#git-三个区" class="headerlink" title="git 三个区"></a>git 三个区</h2><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/git01.png" alt="通过图片了解"></p><p>要对某个项目使用 git 进行管理，需要使用<code>git init</code>命令初始化 git 仓库<br><code>git init</code>会在当前目录生成一个隐藏文件夹 .git 不要去修改这个文件夹下的任意东西。</p><p>git 仓库会分成三个区</p><p>工作区：我们书写代码的地方，工作的目录就叫工作区。</p><p>暂存区：暂时存储的区域，在 git 中，代码无法直接从工作区提交到仓库区，而是需要先从工作区添加到暂存区，然后才能从暂存区提交到仓库区。暂存区的目的是避免误操作。</p><p>仓库区：将保存在暂存区域的内容永久转储到 Git 仓库中，生成版本号。生成版本号之后，就可以任何的回退到某一个具体的版本。</p><h2 id="git-基本命令"><a href="#git-基本命令" class="headerlink" title="git 基本命令"></a>git 基本命令</h2><h3 id="git-init"><a href="#git-init" class="headerlink" title="git init"></a>git init</h3><ul><li>作用：初始化 git 仓库，想要使用 git 对某个项目进行管理，需要<code>git init</code>进行初始化</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化仓库， 在当前目录下生成一个隐藏文件夹.git</span></span><br><span class="line">git init</span><br></pre></td></tr></table></figure><h3 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h3><ul><li>作用：将文件由 <code>工作区</code> 添加到 <code>暂存区</code>，在 git 中，文件无法直接从工作区直接添加到仓库区，必须先从工作区添加到暂存区，再从暂存区添加到仓库区。</li><li>命令：<code>git add 文件名/目录名</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将index.html添加到暂存区</span></span><br><span class="line">git add index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将css目录下所有的文件添加到暂存区</span></span><br><span class="line">git add css</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录下所有的文件</span></span><br><span class="line">git add .</span><br><span class="line">git add --all</span><br></pre></td></tr></table></figure><h3 id="git-commit"><a href="#git-commit" class="headerlink" title="git commit"></a>git commit</h3><p>作用：将文件由 暂存区 添加到 仓库区，生成版本号（存档）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文件从暂存区提交到仓库</span></span><br><span class="line">git commit -m <span class="string">&quot;提交说明&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不写提交说明，会进入vi编辑器，没有写提交说明，是提交不成功的。 :q!来退出</span></span><br><span class="line">git commit   <span class="comment"># 需要使用vi输入内容  vi编辑器常用操作</span></span><br></pre></td></tr></table></figure><h3 id="git-config-配置"><a href="#git-config-配置" class="headerlink" title="git config 配置"></a>git config 配置</h3><p>如果是第一次提交，需要配置提交者信息，推荐和 github 的账号邮箱一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git config  user.name 你的目标用户名</span></span><br><span class="line"><span class="comment"># git config  user.email 你的目标邮箱名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用--global参数，配置全局的用户名和邮箱，只需要配置一次即可。推荐配置github的用户名和密码</span></span><br><span class="line">git config  --global user.name  皮皮虾</span><br><span class="line">git config  --global user.email 2641543334@qq.com</span><br></pre></td></tr></table></figure><p>如果是之前已经配置了，想清空的话，可以使用如下命令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --<span class="built_in">global</span> user.name <span class="string">&#x27;&#x27;</span></span><br><span class="line">git config --<span class="built_in">global</span> user.email <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h3><ul><li><p>作用：查看文件的状态</p></li><li><p>命令：<code>git status</code></p><ul><li>红色表示工作区中的文件需要提交</li><li>绿色表示暂存区中的文件需要提交</li></ul></li></ul><h3 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h3><ul><li>作用：查看提交日志</li><li><code>git log</code> 查看提交的日志</li><li><code>git log --oneline</code> 简洁的日志信息</li></ul><h2 id="git-重置"><a href="#git-重置" class="headerlink" title="git 重置"></a>git 重置</h2><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><ul><li><p>作用：版本回退，将代码恢复到已经提交的某一个版本中。</p></li><li><p><code>git reset --hard 版本号</code> 将代码回退到某个指定的版本(版本号只要有前几位即可)</p></li><li><p>当使用了<code>git reset</code>命令后，版本会回退，使用<code>git log</code>只能看到当前版本之前的信息。使用<code>git reflog</code>可以查看所有的版本信息</p></li></ul><h2 id="git-忽视文件"><a href="#git-忽视文件" class="headerlink" title="git 忽视文件"></a>git 忽视文件</h2><blockquote><p>在仓库中，有些文件是不想被 git 管理的，比如数据的配置密码、写代码的一些思路，node_modules 等。git 可以通过配置从而达到忽视掉一些文件，这样这些文件就可以不用提交了。</p></blockquote><ul><li>在仓库的根目录创建一个<code>.gitignore</code>的文件，文件名是固定的。</li><li>将不需要被 git 管理的文件路径添加到<code>.gitignore</code>中</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 忽视idea.txt文件</span></span><br><span class="line">idea.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽视css下的index.js文件</span></span><br><span class="line">css/index.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽视css下的所有的js文件</span></span><br><span class="line">css/*.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽视css文件夹</span></span><br><span class="line">css</span><br></pre></td></tr></table></figure><h1 id="git-分支操作"><a href="#git-分支操作" class="headerlink" title="git 分支操作"></a>git 分支操作</h1><p>分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习 Git 的时候，另一个你正在另一个平行宇宙里努力学习 SVN。</p><p>如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了 Git 又学会了 SVN！</p><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/fenzhi.png" alt="疯子"></p><h2 id="为什么要有分支？"><a href="#为什么要有分支？" class="headerlink" title="为什么要有分支？"></a>为什么要有分支？</h2><ul><li>如果你要开发一个新的功能，需要 2 周时间，第一周你只能写 50%代码，如果此时立即提交，代码没写完，不完整的代码会影响到别人无法工作。如果等代码写完再提交，代码很容易丢失，风险很大。</li><li>有了分支，你就可以创建一个属于自己的分支，别人看不到，也不影响别人，你在自己的分支上工作，提交到自己的分支上，等到功能开发完毕，一次性的合并到原来的分支。这样既安全，又不影响他人工作。</li></ul><h2 id="git-分支命令"><a href="#git-分支命令" class="headerlink" title="git 分支命令"></a>git 分支命令</h2><blockquote><p>在 git 中，分支实质上仅仅是一个指针，每次代码提交后，这个分支指针就会向后移动，保证一直指向最后一次提交的的版本。git 中使用 HEAD 指向当前分支</p></blockquote><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><ul><li><code>git branch 分支名称</code>创建分支，分支中的代码，在创建时与当前分支的内容完全相同。</li><li>git 在第一次提交时，就有了一个叫<code>master</code>的主分支。</li><li><code>git branch dev</code>，创建了一个叫做 dev 的分支</li></ul><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><ul><li><code>git branch</code>可以查看所有的分支</li><li>在当前分支的前面会有一个<code>*</code></li><li>在 git 中，有一个特殊指针<code>HEAD</code>,永远会指向当前分支</li></ul><h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><ul><li><code>git checkout 分支名称</code>切换分支 HEAD 指针指向了另一个分支</li><li>在当前分支的任何操作，都不会影响到其他的分支，除非进行了分支合并。</li><li>提交代码时，会生产版本号，当前分支会指向最新的版本号。</li></ul><h3 id="创建并切换分支"><a href="#创建并切换分支" class="headerlink" title="创建并切换分支"></a>创建并切换分支</h3><ul><li><code>git checkout -b 分支名称</code> 创建并切换分支</li><li>切换分支会做两件事情<ul><li>创建一个新分支</li><li>把 head 指针指向当前的分支</li></ul></li></ul><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><ul><li><code>git branch -d 分支名称</code> 可以删除分支</li><li>注意：不能在当前分支删除当前分支，需要切换到其他分支才能删除。</li><li>注意：<code>master</code>分支是可以删除的，但是不推荐那么做。</li></ul><h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><ul><li><code>git merge 分支名称</code> 将其他分支的内容合并到当前分支。</li><li>在<code>master</code>分支中执行<code>git merge dev</code> 将<code>dev</code>分支中的代码合并到<code>master</code>分支</li><li><a href="https://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6">分支合并</a></li></ul><h2 id="git-合并冲突"><a href="#git-合并冲突" class="headerlink" title="git 合并冲突"></a>git 合并冲突</h2><ul><li>对于同一个文件，如果有多个分支需要合并时，容易出现冲突。</li><li>合并分支时，如果出现冲突，只能手动处理，再次提交，一般的作法，把自己的代码放到冲突代码的后面即可。</li></ul><h1 id="git-远程仓库"><a href="#git-远程仓库" class="headerlink" title="git 远程仓库"></a>git 远程仓库</h1><h2 id="github-与-git"><a href="#github-与-git" class="headerlink" title="github 与 git"></a>github 与 git</h2><p>git 与 github 没有直接的关系。</p><ul><li>git 是一个版本控制工具。</li><li>github 是一个代码托管平台，开源社区，是 git 的一个远程代码仓库。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. gitHub是一个面向开源及私有软件项目的托管平台，因为只支持git 作为唯一的版本库格式进行托管，故名gitHub。</span></span><br><span class="line"><span class="comment">//2. github免费，代码所有人都能看到，但是只有你自己能修改。付费的可以隐藏。</span></span><br><span class="line"><span class="comment">//3. 创建git项目时，不能有中文。</span></span><br></pre></td></tr></table></figure><p><a href="https://github.com/">github 官网</a></p><p><a href="https://git.oschina.net/">开源中国-git</a></p><h2 id="git-clone"><a href="#git-clone" class="headerlink" title="git clone"></a>git clone</h2><ul><li>作用：克隆远程仓库的代码到本地</li><li>git clone [远程仓库地址]</li><li><code>git clone git://github.com/itcastAAA666/test.git</code>会在本地新建一个<code>test</code>文件夹，在 test 中包含了一个<code>.git</code>目录，用于保存所有的版本记录，同时 test 文件中还有最新的代码，你可以直接进行后续的开发和使用。</li><li>git 克隆默认会使用远程仓库的项目名字，也可以自己指定。需要是使用以下命令：<code>git clone [远程仓库地址] [本地项目名]</code></li></ul><h2 id="git-push"><a href="#git-push" class="headerlink" title="git push"></a>git push</h2><ul><li>作用：将本地仓库中代码提交到远程仓库</li><li><code>git push 仓库地址 master</code> 在代码提交到远程仓库，注意 master 分支必须写，不能省略</li><li>例子：<code>git push git@github.com:itcastAAA666/test.git master</code> 如果第一次使用，需要填写 github 的用户名和密码</li></ul><h2 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h2><ul><li><p>作用：将远程的代码下载到本地</p></li><li><p>通常在 push 前，需要先 pull 一次。</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取远程仓库的更新，并且与本地的分支进行合并</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="SSH-免密码登陆"><a href="#SSH-免密码登陆" class="headerlink" title="SSH 免密码登陆"></a>SSH 免密码登陆</h2><p>git 支持多种数据传输协议：</p><ul><li>https 协议：<code>https://github.com/你的注册名/test.git</code> 需要输入用户名和密码</li><li>ssh 协议：<code>git@github.com:你的注册名/test.git</code> 可以配置免密码登录</li></ul><p>每次 push 或者 pull 代码，如果使用 https 协议，那么都需要输入用户名和密码进行身份的确认，非常麻烦。</p><ul><li>github 为了账户的安全，需要对每一次 push 请求都要验证用户的身份，只有合法的用户才可以 push</li><li>使用 ssh 协议，配置 ssh 免密码，可以做到免密码往 github 推送代码</li></ul><h2 id="SSH-免密码登录配置"><a href="#SSH-免密码登录配置" class="headerlink" title="SSH 免密码登录配置"></a>SSH 免密码登录配置</h2><p>注意：这些命令需要在 bash 中敲</p><ul><li>1 创建 SSH Key：<code>ssh-keygen -t rsa</code><ul><li>key 钥匙的意思</li><li>gen– generate 生成，产生的意思</li></ul></li><li>2 在文件路径  <code>C:\用户\当前用户名\</code>  找到  <code>.ssh</code>  文件夹</li><li>3 文件夹中有两个文件：<ul><li>私钥：<code>id_rsa</code></li><li>公钥：<code>id_rsa.pub</code> 将公钥添加到 github 当中</li></ul></li><li>4 在  <code>github -&gt; settings -&gt; SSH and GPG keys</code>页面中，新创建 SSH key</li><li>5 粘贴 公钥  <code>id_rsa.pub</code>  内容到对应文本框中</li><li>5 在 github 中新建仓库或者使用现在仓库，拿到<code>git@github.com:用户名/仓库名.git</code></li><li>6 此后，再次 SSH 方式与 github“通信”，不用输入密码确认身份了</li></ul><h2 id="git-remote"><a href="#git-remote" class="headerlink" title="git remote"></a>git remote</h2><p>每次 push 操作都需要带上远程仓库的地址，非常的麻烦，我们可以给仓库地址设置一个别名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 给远程仓库设置一个别名</span></span><br><span class="line">git remote add 仓库别名 仓库地址</span><br><span class="line">git remote add PPXCode git@github.com:你的注册名/test.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除PPXCode这个别名</span></span><br><span class="line">git remote remove PPXCode</span><br><span class="line"></span><br><span class="line"><span class="comment"># git clone的仓库默认有一个origin的别名</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础知识点总结</title>
      <link href="/2018/03/26/JavaScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2018/03/26/JavaScript%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E6%B3%B0%E6%88%88%E5%B0%94logo.png"></p><h3 id="前端-Js-基础知识点总结"><a href="#前端-Js-基础知识点总结" class="headerlink" title="前端 Js 基础知识点总结"></a>前端 Js 基础知识点总结</h3><h5 id="1-什么是-JavaScript"><a href="#1-什么是-JavaScript" class="headerlink" title="1.什么是 JavaScript"></a>1.什么是 JavaScript</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ECMAScript,由ECMA-262定义,提供核心的语言功能</span><br><span class="line">文档对象模型(DOM),</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Js基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5新增特性</title>
      <link href="/2017/08/19/html5%E6%96%B0%E5%A2%9E%E7%89%B9%E6%80%A7/"/>
      <url>/2017/08/19/html5%E6%96%B0%E5%A2%9E%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="hello-各位大佬-我是泰戈尔-今天给h5新增的特性做一些总结"><a href="#hello-各位大佬-我是泰戈尔-今天给h5新增的特性做一些总结" class="headerlink" title="hello,各位大佬,我是泰戈尔,今天给h5新增的特性做一些总结"></a><strong>hello,各位大佬,我是泰戈尔,今天给h5新增的特性做一些总结</strong></h2><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E6%B3%B0%E6%88%88%E5%B0%94logo.png"></p><h4 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签:"></a>语义化标签:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">header: 定义了文档的头部区域</span><br><span class="line"></span><br><span class="line">footer:定义了文档的页脚区域</span><br><span class="line"></span><br><span class="line">section: 定义文档中的区段</span><br><span class="line"></span><br><span class="line">nav: 定义文档的导航</span><br><span class="line"></span><br><span class="line">aside: 定义页面的侧边栏内容</span><br><span class="line"></span><br><span class="line">article: 定义页面独立的内容区域</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="增强型表单-多个type类型"><a href="#增强型表单-多个type类型" class="headerlink" title="增强型表单:(多个type类型)"></a>增强型表单:(多个type类型)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">主要是input框的多个type属性</span><br><span class="line"></span><br><span class="line">email: 包含电子邮件地址的输入框</span><br><span class="line"></span><br><span class="line">url: 链接的输入框</span><br><span class="line"></span><br><span class="line">date: 从一个日期选择器选择一个日期</span><br><span class="line"></span><br><span class="line">time: 选择一个时间</span><br><span class="line"></span><br><span class="line">datetime: 选择一个日期（UTC 时间）</span><br><span class="line"></span><br><span class="line">datetime-local: 年月日 本地时间</span><br><span class="line"></span><br><span class="line">month: 选择一个月份</span><br><span class="line"></span><br><span class="line">week: 选择周和年</span><br><span class="line"></span><br><span class="line">number: 数值的输入框</span><br><span class="line"></span><br><span class="line">range: 一定范围内数字值的输入域</span><br><span class="line"></span><br><span class="line">tel: 电话输入框</span><br><span class="line"></span><br><span class="line">search: 搜索框</span><br><span class="line"></span><br><span class="line">color: 主要用于选取颜色</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="新增的表单元素"><a href="#新增的表单元素" class="headerlink" title="新增的表单元素"></a>新增的表单元素</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">datalist: 定义选项列表,就是一个input框预先定义的选项列表,其中包含多个选项(值)供用户选择.</span><br><span class="line"></span><br><span class="line">keygen: 定义表单的的密钥对 生成器字段,当表单提交时,私钥储存在本地,公钥发送到服务器,服务器通常将收到的数据进行加密处理,返回给浏览器端.</span><br><span class="line"></span><br><span class="line">output: 定义了不同类型的输出的结果,比如执行js代码,(计算或者执行一些操作的结果)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="新增的表单属性"><a href="#新增的表单属性" class="headerlink" title="新增的表单属性"></a>新增的表单属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">placehoder: 在输入框内预先定义要提示用户的信息,用户在键入内容时消失</span><br><span class="line"></span><br><span class="line">required: 是一个布尔类型的属性,要求该输入框必须键入内容</span><br><span class="line"></span><br><span class="line">pattern: 利用正则表达式验证input元素的值</span><br><span class="line"></span><br><span class="line">min和max: 设置最小值和最大值</span><br><span class="line"></span><br><span class="line">step: 规定输入框的数字间隔</span><br><span class="line"></span><br><span class="line">height和width: 用于image类型的input标签的图像高度和宽度</span><br><span class="line"></span><br><span class="line">autofocus: 是一个布尔属性,规定了在页面加载完成时,是否自动获取输入框的焦点(定义光标是否定在输入框内)</span><br><span class="line"></span><br><span class="line">multiple: 是一个布尔属性,规定input框中可以选择多个值</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="音视频标签等"><a href="#音视频标签等" class="headerlink" title="音视频标签等"></a>音视频标签等</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">video: 视频标签,在页面中插入一段视频</span><br><span class="line"></span><br><span class="line">audio: 音频标签,在页面中插入一段音频</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="画布Canvas"><a href="#画布Canvas" class="headerlink" title="画布Canvas"></a>画布Canvas</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">中文意思是画布,此标签用于图形的渲染,通过js来完成,此标签只是一个存放图形的容器,必须使用js来书写.</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Geolocation API</span><br><span class="line">允许调用设备的位置的api来定位获取当前位置</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="拖拽释放"><a href="#拖拽释放" class="headerlink" title="拖拽释放"></a>拖拽释放</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户可以利用鼠标等选择可拖动的元素,进行拖拽,释放到指定位置等操作,</span><br><span class="line">(Drap and Drap) API ondrop</span><br></pre></td></tr></table></figure><h4 id="本地储存"><a href="#本地储存" class="headerlink" title="本地储存"></a>本地储存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cookie: 将数据始终在同源的http请求中携带（即使不需要）。即cookie在浏览器和服务器间来回传递,</span><br><span class="line"></span><br><span class="line">localStorage: 仅在本地储存,不会主动向服务器发送数据,数据长期有效,浏览器关闭,数据不会丢失</span><br><span class="line"></span><br><span class="line">sessionStorage: 仅在本地储存,不会主动向服务器发送数据,浏览器关闭数据丢失,</span><br><span class="line"></span><br><span class="line">PS:(这三者是有区别的,具体会在浏览器的缓存文章中详解)</span><br></pre></td></tr></table></figure><h4 id="新增事件"><a href="#新增事件" class="headerlink" title="新增事件"></a>新增事件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">onresize: 当调整窗口大小时触发事件</span><br><span class="line"></span><br><span class="line">ondrag:当拖动元素时触发事件</span><br><span class="line"></span><br><span class="line">onscroll: 当滚动元素滚动元素的滚动条时触发事件</span><br><span class="line"></span><br><span class="line">onmousewheel: 当转动鼠标滚轮时触发事件</span><br><span class="line"></span><br><span class="line">onerror: 当错误发生时触发事件</span><br><span class="line"></span><br><span class="line">onplay: 当媒介数据将要开始播放时触发事件</span><br><span class="line"></span><br><span class="line">onpause: 当媒介数据暂停时触发事件</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">新的通信协议:</span><br><span class="line"></span><br><span class="line">WebSocket是HTML5提供的一种在单个TCP连接上进行全双工通讯的协议，WebSocket使得客户端和服务器之间数据交换变得更加简单，允许服务器主动向客户端推送数据，在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> 语法:data-属性名</span><br><span class="line"></span><br><span class="line">规则：1）通过data-开头；2）data-后必须至少有一个字符，多个单词之间用“-”；</span><br><span class="line"></span><br><span class="line">建议：1）尽量使用小写字母命名；2）不要有任何特殊字符；3）名称不要纯数字。</span><br><span class="line"></span><br><span class="line">2，如何来取值</span><br><span class="line"></span><br><span class="line">使用dataset[data-后面的单词（但data-后面的单词必须使用骆驼命名法，否则可能获取不到值）]。</span><br><span class="line"></span><br><span class="line">例如：&lt;p data-blog-name&#x3D;&quot;itcast&quot;&gt;泰戈尔&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">获取值：p.dataset[&quot;blogname&quot;];</span><br><span class="line">      </span><br><span class="line">2.1 或者使用getAttribute&#x2F;setAttribute来取值,</span><br><span class="line"></span><br><span class="line"> 通过名字就可以bai分析出：get 就是得到,set就是设置.</span><br><span class="line">Attribute就是属性du的zhi意思！</span><br><span class="line">所以你要的答案就是：getAttribute获得dao属性！</span><br><span class="line">setAttribute就是设置属性！</span><br><span class="line">举个例子：</span><br><span class="line">对于session对象来说,我先设置其属性：</span><br><span class="line">session.setAttribute(&quot;hello&quot;);</span><br><span class="line">然后我可以在其它的页面当中通过,session.getAttribute(参数);得到我设置过的属性！</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><h2 id="最后h5新增的特性就差不多这样啦-本萌新刚入这一行没多久-如果有补充或者纠错可以在下方评论系统中留言-我会及时回应-谢谢大家"><a href="#最后h5新增的特性就差不多这样啦-本萌新刚入这一行没多久-如果有补充或者纠错可以在下方评论系统中留言-我会及时回应-谢谢大家" class="headerlink" title="最后h5新增的特性就差不多这样啦,本萌新刚入这一行没多久,如果有补充或者纠错可以在下方评论系统中留言,我会及时回应,谢谢大家,"></a>最后h5新增的特性就差不多这样啦,本萌新刚入这一行没多久,如果有补充或者纠错可以在下方评论系统中留言,我会及时回应,谢谢大家,</h2></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><img src= "/img/loading.gif" data-lazy-src="http://qejcsywwk.bkt.clouddn.com/img/%E5%B2%B3%E4%BA%91%E9%B9%8F.jpg" alt="我说了,我真的不帅,这年头帅也是一种错吗"></p>]]></content>
      
      
      <categories>
          
          <category> 前端必备技能 </category>
          
          <category> Html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自我介绍</title>
      <link href="/2017/03/21/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D-md/"/>
      <url>/2017/03/21/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D-md/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="hello-我是泰戈尔-是这个博客地址的创建者-很高兴您能访问我的主页"><a href="#hello-我是泰戈尔-是这个博客地址的创建者-很高兴您能访问我的主页" class="headerlink" title="hello 我是泰戈尔,是这个博客地址的创建者,很高兴您能访问我的主页."></a>hello 我是泰戈尔,是这个博客地址的创建者,很高兴您能访问我的主页.</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 社交 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2016/06/29/hello-world/"/>
      <url>/2016/06/29/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
